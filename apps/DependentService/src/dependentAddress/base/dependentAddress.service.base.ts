/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DependentAddress as PrismaDependentAddress,
} from "@prisma/client";

export class DependentAddressServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DependentAddressCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dependentAddress.count(args);
  }

  async dependentAddresses<T extends Prisma.DependentAddressFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentAddressFindManyArgs>
  ): Promise<PrismaDependentAddress[]> {
    return this.prisma.dependentAddress.findMany<Prisma.DependentAddressFindManyArgs>(
      args
    );
  }
  async dependentAddress<T extends Prisma.DependentAddressFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentAddressFindUniqueArgs>
  ): Promise<PrismaDependentAddress | null> {
    return this.prisma.dependentAddress.findUnique(args);
  }
  async createDependentAddress<T extends Prisma.DependentAddressCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentAddressCreateArgs>
  ): Promise<PrismaDependentAddress> {
    return this.prisma.dependentAddress.create<T>(args);
  }
  async updateDependentAddress<T extends Prisma.DependentAddressUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentAddressUpdateArgs>
  ): Promise<PrismaDependentAddress> {
    return this.prisma.dependentAddress.update<T>(args);
  }
  async deleteDependentAddress<T extends Prisma.DependentAddressDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentAddressDeleteArgs>
  ): Promise<PrismaDependentAddress> {
    return this.prisma.dependentAddress.delete(args);
  }
}
