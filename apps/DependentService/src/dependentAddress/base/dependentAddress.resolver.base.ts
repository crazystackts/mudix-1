/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DependentAddress } from "./DependentAddress";
import { DependentAddressCountArgs } from "./DependentAddressCountArgs";
import { DependentAddressFindManyArgs } from "./DependentAddressFindManyArgs";
import { DependentAddressFindUniqueArgs } from "./DependentAddressFindUniqueArgs";
import { CreateDependentAddressArgs } from "./CreateDependentAddressArgs";
import { UpdateDependentAddressArgs } from "./UpdateDependentAddressArgs";
import { DeleteDependentAddressArgs } from "./DeleteDependentAddressArgs";
import { DependentAddressService } from "../dependentAddress.service";
@graphql.Resolver(() => DependentAddress)
export class DependentAddressResolverBase {
  constructor(protected readonly service: DependentAddressService) {}

  async _dependentAddressesMeta(
    @graphql.Args() args: DependentAddressCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DependentAddress])
  async dependentAddresses(
    @graphql.Args() args: DependentAddressFindManyArgs
  ): Promise<DependentAddress[]> {
    return this.service.dependentAddresses(args);
  }

  @graphql.Query(() => DependentAddress, { nullable: true })
  async dependentAddress(
    @graphql.Args() args: DependentAddressFindUniqueArgs
  ): Promise<DependentAddress | null> {
    const result = await this.service.dependentAddress(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DependentAddress)
  async createDependentAddress(
    @graphql.Args() args: CreateDependentAddressArgs
  ): Promise<DependentAddress> {
    return await this.service.createDependentAddress({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DependentAddress)
  async updateDependentAddress(
    @graphql.Args() args: UpdateDependentAddressArgs
  ): Promise<DependentAddress | null> {
    try {
      return await this.service.updateDependentAddress({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DependentAddress)
  async deleteDependentAddress(
    @graphql.Args() args: DeleteDependentAddressArgs
  ): Promise<DependentAddress | null> {
    try {
      return await this.service.deleteDependentAddress(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
