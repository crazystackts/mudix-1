/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DependentContact as PrismaDependentContact,
} from "@prisma/client";

export class DependentContactServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DependentContactCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dependentContact.count(args);
  }

  async dependentContacts<T extends Prisma.DependentContactFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentContactFindManyArgs>
  ): Promise<PrismaDependentContact[]> {
    return this.prisma.dependentContact.findMany<Prisma.DependentContactFindManyArgs>(
      args
    );
  }
  async dependentContact<T extends Prisma.DependentContactFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentContactFindUniqueArgs>
  ): Promise<PrismaDependentContact | null> {
    return this.prisma.dependentContact.findUnique(args);
  }
  async createDependentContact<T extends Prisma.DependentContactCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentContactCreateArgs>
  ): Promise<PrismaDependentContact> {
    return this.prisma.dependentContact.create<T>(args);
  }
  async updateDependentContact<T extends Prisma.DependentContactUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentContactUpdateArgs>
  ): Promise<PrismaDependentContact> {
    return this.prisma.dependentContact.update<T>(args);
  }
  async deleteDependentContact<T extends Prisma.DependentContactDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentContactDeleteArgs>
  ): Promise<PrismaDependentContact> {
    return this.prisma.dependentContact.delete(args);
  }
}
