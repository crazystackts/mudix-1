/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DependentContactService } from "../dependentContact.service";
import { DependentContactCreateInput } from "./DependentContactCreateInput";
import { DependentContact } from "./DependentContact";
import { DependentContactFindManyArgs } from "./DependentContactFindManyArgs";
import { DependentContactWhereUniqueInput } from "./DependentContactWhereUniqueInput";
import { DependentContactUpdateInput } from "./DependentContactUpdateInput";

export class DependentContactControllerBase {
  constructor(protected readonly service: DependentContactService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DependentContact })
  async createDependentContact(
    @common.Body() data: DependentContactCreateInput
  ): Promise<DependentContact> {
    return await this.service.createDependentContact({
      data: data,
      select: {
        dependentsId: true,
        email: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DependentContact] })
  @ApiNestedQuery(DependentContactFindManyArgs)
  async dependentContacts(
    @common.Req() request: Request
  ): Promise<DependentContact[]> {
    const args = plainToClass(DependentContactFindManyArgs, request.query);
    return this.service.dependentContacts({
      ...args,
      select: {
        dependentsId: true,
        email: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DependentContact })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dependentContact(
    @common.Param() params: DependentContactWhereUniqueInput
  ): Promise<DependentContact | null> {
    const result = await this.service.dependentContact({
      where: params,
      select: {
        dependentsId: true,
        email: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DependentContact })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDependentContact(
    @common.Param() params: DependentContactWhereUniqueInput,
    @common.Body() data: DependentContactUpdateInput
  ): Promise<DependentContact | null> {
    try {
      return await this.service.updateDependentContact({
        where: params,
        data: data,
        select: {
          dependentsId: true,
          email: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DependentContact })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDependentContact(
    @common.Param() params: DependentContactWhereUniqueInput
  ): Promise<DependentContact | null> {
    try {
      return await this.service.deleteDependentContact({
        where: params,
        select: {
          dependentsId: true,
          email: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
