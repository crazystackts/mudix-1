/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DependentAttachmentService } from "../dependentAttachment.service";
import { DependentAttachmentCreateInput } from "./DependentAttachmentCreateInput";
import { DependentAttachment } from "./DependentAttachment";
import { DependentAttachmentFindManyArgs } from "./DependentAttachmentFindManyArgs";
import { DependentAttachmentWhereUniqueInput } from "./DependentAttachmentWhereUniqueInput";
import { DependentAttachmentUpdateInput } from "./DependentAttachmentUpdateInput";
import { DependentFileFindManyArgs } from "../../dependentFile/base/DependentFileFindManyArgs";
import { DependentFile } from "../../dependentFile/base/DependentFile";
import { DependentFileWhereUniqueInput } from "../../dependentFile/base/DependentFileWhereUniqueInput";

export class DependentAttachmentControllerBase {
  constructor(protected readonly service: DependentAttachmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DependentAttachment })
  async createDependentAttachment(
    @common.Body() data: DependentAttachmentCreateInput
  ): Promise<DependentAttachment> {
    return await this.service.createDependentAttachment({
      data: data,
      select: {
        dependentsId: true,
        group: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DependentAttachment] })
  @ApiNestedQuery(DependentAttachmentFindManyArgs)
  async dependentAttachments(
    @common.Req() request: Request
  ): Promise<DependentAttachment[]> {
    const args = plainToClass(DependentAttachmentFindManyArgs, request.query);
    return this.service.dependentAttachments({
      ...args,
      select: {
        dependentsId: true,
        group: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DependentAttachment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dependentAttachment(
    @common.Param() params: DependentAttachmentWhereUniqueInput
  ): Promise<DependentAttachment | null> {
    const result = await this.service.dependentAttachment({
      where: params,
      select: {
        dependentsId: true,
        group: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DependentAttachment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDependentAttachment(
    @common.Param() params: DependentAttachmentWhereUniqueInput,
    @common.Body() data: DependentAttachmentUpdateInput
  ): Promise<DependentAttachment | null> {
    try {
      return await this.service.updateDependentAttachment({
        where: params,
        data: data,
        select: {
          dependentsId: true,
          group: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DependentAttachment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDependentAttachment(
    @common.Param() params: DependentAttachmentWhereUniqueInput
  ): Promise<DependentAttachment | null> {
    try {
      return await this.service.deleteDependentAttachment({
        where: params,
        select: {
          dependentsId: true,
          group: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/dependentFiles")
  @ApiNestedQuery(DependentFileFindManyArgs)
  async findDependentFiles(
    @common.Req() request: Request,
    @common.Param() params: DependentAttachmentWhereUniqueInput
  ): Promise<DependentFile[]> {
    const query = plainToClass(DependentFileFindManyArgs, request.query);
    const results = await this.service.findDependentFiles(params.id, {
      ...query,
      select: {
        dependentAttachments: {
          select: {
            id: true,
          },
        },

        filename: true,
        id: true,
        name: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dependentFiles")
  async connectDependentFiles(
    @common.Param() params: DependentAttachmentWhereUniqueInput,
    @common.Body() body: DependentFileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentFiles: {
        connect: body,
      },
    };
    await this.service.updateDependentAttachment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dependentFiles")
  async updateDependentFiles(
    @common.Param() params: DependentAttachmentWhereUniqueInput,
    @common.Body() body: DependentFileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentFiles: {
        set: body,
      },
    };
    await this.service.updateDependentAttachment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dependentFiles")
  async disconnectDependentFiles(
    @common.Param() params: DependentAttachmentWhereUniqueInput,
    @common.Body() body: DependentFileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentFiles: {
        disconnect: body,
      },
    };
    await this.service.updateDependentAttachment({
      where: params,
      data,
      select: { id: true },
    });
  }
}
