/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DependentFile as PrismaDependentFile,
  DependentAttachment as PrismaDependentAttachment,
} from "@prisma/client";

export class DependentFileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DependentFileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dependentFile.count(args);
  }

  async dependentFiles<T extends Prisma.DependentFileFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentFileFindManyArgs>
  ): Promise<PrismaDependentFile[]> {
    return this.prisma.dependentFile.findMany<Prisma.DependentFileFindManyArgs>(
      args
    );
  }
  async dependentFile<T extends Prisma.DependentFileFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentFileFindUniqueArgs>
  ): Promise<PrismaDependentFile | null> {
    return this.prisma.dependentFile.findUnique(args);
  }
  async createDependentFile<T extends Prisma.DependentFileCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentFileCreateArgs>
  ): Promise<PrismaDependentFile> {
    return this.prisma.dependentFile.create<T>(args);
  }
  async updateDependentFile<T extends Prisma.DependentFileUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentFileUpdateArgs>
  ): Promise<PrismaDependentFile> {
    return this.prisma.dependentFile.update<T>(args);
  }
  async deleteDependentFile<T extends Prisma.DependentFileDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentFileDeleteArgs>
  ): Promise<PrismaDependentFile> {
    return this.prisma.dependentFile.delete(args);
  }

  async getDependentAttachments(
    parentId: string
  ): Promise<PrismaDependentAttachment | null> {
    return this.prisma.dependentFile
      .findUnique({
        where: { id: parentId },
      })
      .dependentAttachments();
  }
}
