/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DependentDocument } from "./DependentDocument";
import { DependentDocumentCountArgs } from "./DependentDocumentCountArgs";
import { DependentDocumentFindManyArgs } from "./DependentDocumentFindManyArgs";
import { DependentDocumentFindUniqueArgs } from "./DependentDocumentFindUniqueArgs";
import { CreateDependentDocumentArgs } from "./CreateDependentDocumentArgs";
import { UpdateDependentDocumentArgs } from "./UpdateDependentDocumentArgs";
import { DeleteDependentDocumentArgs } from "./DeleteDependentDocumentArgs";
import { DependentDocumentService } from "../dependentDocument.service";
@graphql.Resolver(() => DependentDocument)
export class DependentDocumentResolverBase {
  constructor(protected readonly service: DependentDocumentService) {}

  async _dependentDocumentsMeta(
    @graphql.Args() args: DependentDocumentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DependentDocument])
  async dependentDocuments(
    @graphql.Args() args: DependentDocumentFindManyArgs
  ): Promise<DependentDocument[]> {
    return this.service.dependentDocuments(args);
  }

  @graphql.Query(() => DependentDocument, { nullable: true })
  async dependentDocument(
    @graphql.Args() args: DependentDocumentFindUniqueArgs
  ): Promise<DependentDocument | null> {
    const result = await this.service.dependentDocument(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DependentDocument)
  async createDependentDocument(
    @graphql.Args() args: CreateDependentDocumentArgs
  ): Promise<DependentDocument> {
    return await this.service.createDependentDocument({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DependentDocument)
  async updateDependentDocument(
    @graphql.Args() args: UpdateDependentDocumentArgs
  ): Promise<DependentDocument | null> {
    try {
      return await this.service.updateDependentDocument({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DependentDocument)
  async deleteDependentDocument(
    @graphql.Args() args: DeleteDependentDocumentArgs
  ): Promise<DependentDocument | null> {
    try {
      return await this.service.deleteDependentDocument(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
