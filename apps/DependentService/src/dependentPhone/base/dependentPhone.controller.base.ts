/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DependentPhoneService } from "../dependentPhone.service";
import { DependentPhoneCreateInput } from "./DependentPhoneCreateInput";
import { DependentPhone } from "./DependentPhone";
import { DependentPhoneFindManyArgs } from "./DependentPhoneFindManyArgs";
import { DependentPhoneWhereUniqueInput } from "./DependentPhoneWhereUniqueInput";
import { DependentPhoneUpdateInput } from "./DependentPhoneUpdateInput";

export class DependentPhoneControllerBase {
  constructor(protected readonly service: DependentPhoneService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DependentPhone })
  async createDependentPhone(
    @common.Body() data: DependentPhoneCreateInput
  ): Promise<DependentPhone> {
    return await this.service.createDependentPhone({
      data: data,
      select: {
        dependentsId: true,
        id: true,
        numberField: true,
        typeField: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DependentPhone] })
  @ApiNestedQuery(DependentPhoneFindManyArgs)
  async dependentPhones(
    @common.Req() request: Request
  ): Promise<DependentPhone[]> {
    const args = plainToClass(DependentPhoneFindManyArgs, request.query);
    return this.service.dependentPhones({
      ...args,
      select: {
        dependentsId: true,
        id: true,
        numberField: true,
        typeField: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DependentPhone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dependentPhone(
    @common.Param() params: DependentPhoneWhereUniqueInput
  ): Promise<DependentPhone | null> {
    const result = await this.service.dependentPhone({
      where: params,
      select: {
        dependentsId: true,
        id: true,
        numberField: true,
        typeField: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DependentPhone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDependentPhone(
    @common.Param() params: DependentPhoneWhereUniqueInput,
    @common.Body() data: DependentPhoneUpdateInput
  ): Promise<DependentPhone | null> {
    try {
      return await this.service.updateDependentPhone({
        where: params,
        data: data,
        select: {
          dependentsId: true,
          id: true,
          numberField: true,
          typeField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DependentPhone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDependentPhone(
    @common.Param() params: DependentPhoneWhereUniqueInput
  ): Promise<DependentPhone | null> {
    try {
      return await this.service.deleteDependentPhone({
        where: params,
        select: {
          dependentsId: true,
          id: true,
          numberField: true,
          typeField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
