/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DependentPhone as PrismaDependentPhone } from "@prisma/client";

export class DependentPhoneServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DependentPhoneCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dependentPhone.count(args);
  }

  async dependentPhones<T extends Prisma.DependentPhoneFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentPhoneFindManyArgs>
  ): Promise<PrismaDependentPhone[]> {
    return this.prisma.dependentPhone.findMany<Prisma.DependentPhoneFindManyArgs>(
      args
    );
  }
  async dependentPhone<T extends Prisma.DependentPhoneFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentPhoneFindUniqueArgs>
  ): Promise<PrismaDependentPhone | null> {
    return this.prisma.dependentPhone.findUnique(args);
  }
  async createDependentPhone<T extends Prisma.DependentPhoneCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentPhoneCreateArgs>
  ): Promise<PrismaDependentPhone> {
    return this.prisma.dependentPhone.create<T>(args);
  }
  async updateDependentPhone<T extends Prisma.DependentPhoneUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentPhoneUpdateArgs>
  ): Promise<PrismaDependentPhone> {
    return this.prisma.dependentPhone.update<T>(args);
  }
  async deleteDependentPhone<T extends Prisma.DependentPhoneDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentPhoneDeleteArgs>
  ): Promise<PrismaDependentPhone> {
    return this.prisma.dependentPhone.delete(args);
  }
}
