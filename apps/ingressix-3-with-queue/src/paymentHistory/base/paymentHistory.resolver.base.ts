/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaymentHistory } from "./PaymentHistory";
import { PaymentHistoryCountArgs } from "./PaymentHistoryCountArgs";
import { PaymentHistoryFindManyArgs } from "./PaymentHistoryFindManyArgs";
import { PaymentHistoryFindUniqueArgs } from "./PaymentHistoryFindUniqueArgs";
import { CreatePaymentHistoryArgs } from "./CreatePaymentHistoryArgs";
import { UpdatePaymentHistoryArgs } from "./UpdatePaymentHistoryArgs";
import { DeletePaymentHistoryArgs } from "./DeletePaymentHistoryArgs";
import { Order } from "../../order/base/Order";
import { PaymentHistoryService } from "../paymentHistory.service";
@graphql.Resolver(() => PaymentHistory)
export class PaymentHistoryResolverBase {
  constructor(protected readonly service: PaymentHistoryService) {}

  async _paymentHistoriesMeta(
    @graphql.Args() args: PaymentHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PaymentHistory])
  async paymentHistories(
    @graphql.Args() args: PaymentHistoryFindManyArgs
  ): Promise<PaymentHistory[]> {
    return this.service.paymentHistories(args);
  }

  @graphql.Query(() => PaymentHistory, { nullable: true })
  async paymentHistory(
    @graphql.Args() args: PaymentHistoryFindUniqueArgs
  ): Promise<PaymentHistory | null> {
    const result = await this.service.paymentHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PaymentHistory)
  async createPaymentHistory(
    @graphql.Args() args: CreatePaymentHistoryArgs
  ): Promise<PaymentHistory> {
    return await this.service.createPaymentHistory({
      ...args,
      data: {
        ...args.data,

        orders: {
          connect: args.data.orders,
        },
      },
    });
  }

  @graphql.Mutation(() => PaymentHistory)
  async updatePaymentHistory(
    @graphql.Args() args: UpdatePaymentHistoryArgs
  ): Promise<PaymentHistory | null> {
    try {
      return await this.service.updatePaymentHistory({
        ...args,
        data: {
          ...args.data,

          orders: {
            connect: args.data.orders,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentHistory)
  async deletePaymentHistory(
    @graphql.Args() args: DeletePaymentHistoryArgs
  ): Promise<PaymentHistory | null> {
    try {
      return await this.service.deletePaymentHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "orders",
  })
  async getOrders(
    @graphql.Parent() parent: PaymentHistory
  ): Promise<Order | null> {
    const result = await this.service.getOrders(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
