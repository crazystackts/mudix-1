/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PaymentHistory as PrismaPaymentHistory,
  Order as PrismaOrder,
} from "@prisma/client";

export class PaymentHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PaymentHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.paymentHistory.count(args);
  }

  async paymentHistories<T extends Prisma.PaymentHistoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentHistoryFindManyArgs>
  ): Promise<PrismaPaymentHistory[]> {
    return this.prisma.paymentHistory.findMany<Prisma.PaymentHistoryFindManyArgs>(
      args
    );
  }
  async paymentHistory<T extends Prisma.PaymentHistoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentHistoryFindUniqueArgs>
  ): Promise<PrismaPaymentHistory | null> {
    return this.prisma.paymentHistory.findUnique(args);
  }
  async createPaymentHistory<T extends Prisma.PaymentHistoryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentHistoryCreateArgs>
  ): Promise<PrismaPaymentHistory> {
    return this.prisma.paymentHistory.create<T>(args);
  }
  async updatePaymentHistory<T extends Prisma.PaymentHistoryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentHistoryUpdateArgs>
  ): Promise<PrismaPaymentHistory> {
    return this.prisma.paymentHistory.update<T>(args);
  }
  async deletePaymentHistory<T extends Prisma.PaymentHistoryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentHistoryDeleteArgs>
  ): Promise<PrismaPaymentHistory> {
    return this.prisma.paymentHistory.delete(args);
  }

  async getOrders(parentId: number): Promise<PrismaOrder | null> {
    return this.prisma.paymentHistory
      .findUnique({
        where: { id: parentId },
      })
      .orders();
  }
}
