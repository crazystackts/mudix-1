/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QueuePositionService } from "../queuePosition.service";
import { QueuePositionCreateInput } from "./QueuePositionCreateInput";
import { QueuePosition } from "./QueuePosition";
import { QueuePositionFindManyArgs } from "./QueuePositionFindManyArgs";
import { QueuePositionWhereUniqueInput } from "./QueuePositionWhereUniqueInput";
import { QueuePositionUpdateInput } from "./QueuePositionUpdateInput";

export class QueuePositionControllerBase {
  constructor(protected readonly service: QueuePositionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QueuePosition })
  async createQueuePosition(
    @common.Body() data: QueuePositionCreateInput
  ): Promise<QueuePosition> {
    return await this.service.createQueuePosition({
      data: {
        ...data,

        queues: {
          connect: data.queues,
        },

        sessions: data.sessions
          ? {
              connect: data.sessions,
            }
          : undefined,

        users: {
          connect: data.users,
        },
      },
      select: {
        id: true,
        joinedAt: true,
        posicaoAtual: true,
        priorityLevel: true,

        queues: {
          select: {
            id: true,
          },
        },

        sessions: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QueuePosition] })
  @ApiNestedQuery(QueuePositionFindManyArgs)
  async queuePositions(
    @common.Req() request: Request
  ): Promise<QueuePosition[]> {
    const args = plainToClass(QueuePositionFindManyArgs, request.query);
    return this.service.queuePositions({
      ...args,
      select: {
        id: true,
        joinedAt: true,
        posicaoAtual: true,
        priorityLevel: true,

        queues: {
          select: {
            id: true,
          },
        },

        sessions: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QueuePosition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async queuePosition(
    @common.Param() params: QueuePositionWhereUniqueInput
  ): Promise<QueuePosition | null> {
    const result = await this.service.queuePosition({
      where: params,
      select: {
        id: true,
        joinedAt: true,
        posicaoAtual: true,
        priorityLevel: true,

        queues: {
          select: {
            id: true,
          },
        },

        sessions: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QueuePosition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQueuePosition(
    @common.Param() params: QueuePositionWhereUniqueInput,
    @common.Body() data: QueuePositionUpdateInput
  ): Promise<QueuePosition | null> {
    try {
      return await this.service.updateQueuePosition({
        where: params,
        data: {
          ...data,

          queues: {
            connect: data.queues,
          },

          sessions: data.sessions
            ? {
                connect: data.sessions,
              }
            : undefined,

          users: {
            connect: data.users,
          },
        },
        select: {
          id: true,
          joinedAt: true,
          posicaoAtual: true,
          priorityLevel: true,

          queues: {
            select: {
              id: true,
            },
          },

          sessions: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          users: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QueuePosition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQueuePosition(
    @common.Param() params: QueuePositionWhereUniqueInput
  ): Promise<QueuePosition | null> {
    try {
      return await this.service.deleteQueuePosition({
        where: params,
        select: {
          id: true,
          joinedAt: true,
          posicaoAtual: true,
          priorityLevel: true,

          queues: {
            select: {
              id: true,
            },
          },

          sessions: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          users: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
