/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { QueuePosition } from "./QueuePosition";
import { QueuePositionCountArgs } from "./QueuePositionCountArgs";
import { QueuePositionFindManyArgs } from "./QueuePositionFindManyArgs";
import { QueuePositionFindUniqueArgs } from "./QueuePositionFindUniqueArgs";
import { CreateQueuePositionArgs } from "./CreateQueuePositionArgs";
import { UpdateQueuePositionArgs } from "./UpdateQueuePositionArgs";
import { DeleteQueuePositionArgs } from "./DeleteQueuePositionArgs";
import { Queue } from "../../queue/base/Queue";
import { Session } from "../../session/base/Session";
import { User } from "../../user/base/User";
import { QueuePositionService } from "../queuePosition.service";
@graphql.Resolver(() => QueuePosition)
export class QueuePositionResolverBase {
  constructor(protected readonly service: QueuePositionService) {}

  async _queuePositionsMeta(
    @graphql.Args() args: QueuePositionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [QueuePosition])
  async queuePositions(
    @graphql.Args() args: QueuePositionFindManyArgs
  ): Promise<QueuePosition[]> {
    return this.service.queuePositions(args);
  }

  @graphql.Query(() => QueuePosition, { nullable: true })
  async queuePosition(
    @graphql.Args() args: QueuePositionFindUniqueArgs
  ): Promise<QueuePosition | null> {
    const result = await this.service.queuePosition(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QueuePosition)
  async createQueuePosition(
    @graphql.Args() args: CreateQueuePositionArgs
  ): Promise<QueuePosition> {
    return await this.service.createQueuePosition({
      ...args,
      data: {
        ...args.data,

        queues: {
          connect: args.data.queues,
        },

        sessions: args.data.sessions
          ? {
              connect: args.data.sessions,
            }
          : undefined,

        users: {
          connect: args.data.users,
        },
      },
    });
  }

  @graphql.Mutation(() => QueuePosition)
  async updateQueuePosition(
    @graphql.Args() args: UpdateQueuePositionArgs
  ): Promise<QueuePosition | null> {
    try {
      return await this.service.updateQueuePosition({
        ...args,
        data: {
          ...args.data,

          queues: {
            connect: args.data.queues,
          },

          sessions: args.data.sessions
            ? {
                connect: args.data.sessions,
              }
            : undefined,

          users: {
            connect: args.data.users,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QueuePosition)
  async deleteQueuePosition(
    @graphql.Args() args: DeleteQueuePositionArgs
  ): Promise<QueuePosition | null> {
    try {
      return await this.service.deleteQueuePosition(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Queue, {
    nullable: true,
    name: "queues",
  })
  async getQueues(
    @graphql.Parent() parent: QueuePosition
  ): Promise<Queue | null> {
    const result = await this.service.getQueues(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Session, {
    nullable: true,
    name: "sessions",
  })
  async getSessions(
    @graphql.Parent() parent: QueuePosition
  ): Promise<Session | null> {
    const result = await this.service.getSessions(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "users",
  })
  async getUsers(
    @graphql.Parent() parent: QueuePosition
  ): Promise<User | null> {
    const result = await this.service.getUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
