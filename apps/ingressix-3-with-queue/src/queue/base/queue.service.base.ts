/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Queue as PrismaQueue,
  Notification as PrismaNotification,
  QueueAction as PrismaQueueAction,
  QueueHistory as PrismaQueueHistory,
  QueuePosition as PrismaQueuePosition,
} from "@prisma/client";

export class QueueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.QueueCountArgs, "select">): Promise<number> {
    return this.prisma.queue.count(args);
  }

  async queues<T extends Prisma.QueueFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueueFindManyArgs>
  ): Promise<PrismaQueue[]> {
    return this.prisma.queue.findMany<Prisma.QueueFindManyArgs>(args);
  }
  async queue<T extends Prisma.QueueFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueueFindUniqueArgs>
  ): Promise<PrismaQueue | null> {
    return this.prisma.queue.findUnique(args);
  }
  async createQueue<T extends Prisma.QueueCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueueCreateArgs>
  ): Promise<PrismaQueue> {
    return this.prisma.queue.create<T>(args);
  }
  async updateQueue<T extends Prisma.QueueUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueueUpdateArgs>
  ): Promise<PrismaQueue> {
    return this.prisma.queue.update<T>(args);
  }
  async deleteQueue<T extends Prisma.QueueDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueueDeleteArgs>
  ): Promise<PrismaQueue> {
    return this.prisma.queue.delete(args);
  }

  async findNotifications(
    parentId: string,
    args: Prisma.NotificationFindManyArgs
  ): Promise<PrismaNotification[]> {
    return this.prisma.queue
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .notifications(args);
  }

  async findQueueActions(
    parentId: string,
    args: Prisma.QueueActionFindManyArgs
  ): Promise<PrismaQueueAction[]> {
    return this.prisma.queue
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .queueActions(args);
  }

  async findQueueHistories(
    parentId: string,
    args: Prisma.QueueHistoryFindManyArgs
  ): Promise<PrismaQueueHistory[]> {
    return this.prisma.queue
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .queueHistories(args);
  }

  async findQueuePositions(
    parentId: string,
    args: Prisma.QueuePositionFindManyArgs
  ): Promise<PrismaQueuePosition[]> {
    return this.prisma.queue
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .queuePositions(args);
  }
}
