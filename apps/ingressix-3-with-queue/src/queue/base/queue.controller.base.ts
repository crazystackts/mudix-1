/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QueueService } from "../queue.service";
import { QueueCreateInput } from "./QueueCreateInput";
import { Queue } from "./Queue";
import { QueueFindManyArgs } from "./QueueFindManyArgs";
import { QueueWhereUniqueInput } from "./QueueWhereUniqueInput";
import { QueueUpdateInput } from "./QueueUpdateInput";
import { NotificationFindManyArgs } from "../../notification/base/NotificationFindManyArgs";
import { Notification } from "../../notification/base/Notification";
import { NotificationWhereUniqueInput } from "../../notification/base/NotificationWhereUniqueInput";
import { QueueActionFindManyArgs } from "../../queueAction/base/QueueActionFindManyArgs";
import { QueueAction } from "../../queueAction/base/QueueAction";
import { QueueActionWhereUniqueInput } from "../../queueAction/base/QueueActionWhereUniqueInput";
import { QueueHistoryFindManyArgs } from "../../queueHistory/base/QueueHistoryFindManyArgs";
import { QueueHistory } from "../../queueHistory/base/QueueHistory";
import { QueueHistoryWhereUniqueInput } from "../../queueHistory/base/QueueHistoryWhereUniqueInput";
import { QueuePositionFindManyArgs } from "../../queuePosition/base/QueuePositionFindManyArgs";
import { QueuePosition } from "../../queuePosition/base/QueuePosition";
import { QueuePositionWhereUniqueInput } from "../../queuePosition/base/QueuePositionWhereUniqueInput";

export class QueueControllerBase {
  constructor(protected readonly service: QueueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Queue })
  async createQueue(@common.Body() data: QueueCreateInput): Promise<Queue> {
    return await this.service.createQueue({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Queue] })
  @ApiNestedQuery(QueueFindManyArgs)
  async queues(@common.Req() request: Request): Promise<Queue[]> {
    const args = plainToClass(QueueFindManyArgs, request.query);
    return this.service.queues({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Queue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async queue(
    @common.Param() params: QueueWhereUniqueInput
  ): Promise<Queue | null> {
    const result = await this.service.queue({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Queue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQueue(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() data: QueueUpdateInput
  ): Promise<Queue | null> {
    try {
      return await this.service.updateQueue({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Queue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQueue(
    @common.Param() params: QueueWhereUniqueInput
  ): Promise<Queue | null> {
    try {
      return await this.service.deleteQueue({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/notifications")
  @ApiNestedQuery(NotificationFindManyArgs)
  async findNotifications(
    @common.Req() request: Request,
    @common.Param() params: QueueWhereUniqueInput
  ): Promise<Notification[]> {
    const query = plainToClass(NotificationFindManyArgs, request.query);
    const results = await this.service.findNotifications(params.id, {
      ...query,
      select: {
        id: true,
        message: true,

        queues: {
          select: {
            id: true,
          },
        },

        sentAt: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/notifications")
  async connectNotifications(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        connect: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/notifications")
  async updateNotifications(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        set: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/notifications")
  async disconnectNotifications(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        disconnect: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/queueActions")
  @ApiNestedQuery(QueueActionFindManyArgs)
  async findQueueActions(
    @common.Req() request: Request,
    @common.Param() params: QueueWhereUniqueInput
  ): Promise<QueueAction[]> {
    const query = plainToClass(QueueActionFindManyArgs, request.query);
    const results = await this.service.findQueueActions(params.id, {
      ...query,
      select: {
        actionTimestamp: true,
        actionType: true,
        details: true,
        id: true,

        queues: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/queueActions")
  async connectQueueActions(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: QueueActionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queueActions: {
        connect: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/queueActions")
  async updateQueueActions(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: QueueActionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queueActions: {
        set: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/queueActions")
  async disconnectQueueActions(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: QueueActionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queueActions: {
        disconnect: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/queueHistories")
  @ApiNestedQuery(QueueHistoryFindManyArgs)
  async findQueueHistories(
    @common.Req() request: Request,
    @common.Param() params: QueueWhereUniqueInput
  ): Promise<QueueHistory[]> {
    const query = plainToClass(QueueHistoryFindManyArgs, request.query);
    const results = await this.service.findQueueHistories(params.id, {
      ...query,
      select: {
        id: true,
        posicaoAtual: true,

        queues: {
          select: {
            id: true,
          },
        },

        recordedAt: true,
        status: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/queueHistories")
  async connectQueueHistories(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: QueueHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queueHistories: {
        connect: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/queueHistories")
  async updateQueueHistories(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: QueueHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queueHistories: {
        set: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/queueHistories")
  async disconnectQueueHistories(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: QueueHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queueHistories: {
        disconnect: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/queuePositions")
  @ApiNestedQuery(QueuePositionFindManyArgs)
  async findQueuePositions(
    @common.Req() request: Request,
    @common.Param() params: QueueWhereUniqueInput
  ): Promise<QueuePosition[]> {
    const query = plainToClass(QueuePositionFindManyArgs, request.query);
    const results = await this.service.findQueuePositions(params.id, {
      ...query,
      select: {
        id: true,
        joinedAt: true,
        posicaoAtual: true,
        priorityLevel: true,

        queues: {
          select: {
            id: true,
          },
        },

        sessions: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/queuePositions")
  async connectQueuePositions(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: QueuePositionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuePositions: {
        connect: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/queuePositions")
  async updateQueuePositions(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: QueuePositionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuePositions: {
        set: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/queuePositions")
  async disconnectQueuePositions(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: QueuePositionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuePositions: {
        disconnect: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }
}
