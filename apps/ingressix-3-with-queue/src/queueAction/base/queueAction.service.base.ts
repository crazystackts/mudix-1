/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QueueAction as PrismaQueueAction,
  Queue as PrismaQueue,
  User as PrismaUser,
} from "@prisma/client";

export class QueueActionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QueueActionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.queueAction.count(args);
  }

  async queueActions<T extends Prisma.QueueActionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueueActionFindManyArgs>
  ): Promise<PrismaQueueAction[]> {
    return this.prisma.queueAction.findMany<Prisma.QueueActionFindManyArgs>(
      args
    );
  }
  async queueAction<T extends Prisma.QueueActionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueueActionFindUniqueArgs>
  ): Promise<PrismaQueueAction | null> {
    return this.prisma.queueAction.findUnique(args);
  }
  async createQueueAction<T extends Prisma.QueueActionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueueActionCreateArgs>
  ): Promise<PrismaQueueAction> {
    return this.prisma.queueAction.create<T>(args);
  }
  async updateQueueAction<T extends Prisma.QueueActionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueueActionUpdateArgs>
  ): Promise<PrismaQueueAction> {
    return this.prisma.queueAction.update<T>(args);
  }
  async deleteQueueAction<T extends Prisma.QueueActionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueueActionDeleteArgs>
  ): Promise<PrismaQueueAction> {
    return this.prisma.queueAction.delete(args);
  }

  async getQueues(parentId: string): Promise<PrismaQueue | null> {
    return this.prisma.queueAction
      .findUnique({
        where: { id: parentId },
      })
      .queues();
  }

  async getUsers(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.queueAction
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }
}
