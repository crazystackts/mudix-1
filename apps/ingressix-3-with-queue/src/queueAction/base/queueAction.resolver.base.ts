/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { QueueAction } from "./QueueAction";
import { QueueActionCountArgs } from "./QueueActionCountArgs";
import { QueueActionFindManyArgs } from "./QueueActionFindManyArgs";
import { QueueActionFindUniqueArgs } from "./QueueActionFindUniqueArgs";
import { CreateQueueActionArgs } from "./CreateQueueActionArgs";
import { UpdateQueueActionArgs } from "./UpdateQueueActionArgs";
import { DeleteQueueActionArgs } from "./DeleteQueueActionArgs";
import { Queue } from "../../queue/base/Queue";
import { User } from "../../user/base/User";
import { QueueActionService } from "../queueAction.service";
@graphql.Resolver(() => QueueAction)
export class QueueActionResolverBase {
  constructor(protected readonly service: QueueActionService) {}

  async _queueActionsMeta(
    @graphql.Args() args: QueueActionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [QueueAction])
  async queueActions(
    @graphql.Args() args: QueueActionFindManyArgs
  ): Promise<QueueAction[]> {
    return this.service.queueActions(args);
  }

  @graphql.Query(() => QueueAction, { nullable: true })
  async queueAction(
    @graphql.Args() args: QueueActionFindUniqueArgs
  ): Promise<QueueAction | null> {
    const result = await this.service.queueAction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QueueAction)
  async createQueueAction(
    @graphql.Args() args: CreateQueueActionArgs
  ): Promise<QueueAction> {
    return await this.service.createQueueAction({
      ...args,
      data: {
        ...args.data,

        queues: {
          connect: args.data.queues,
        },

        users: {
          connect: args.data.users,
        },
      },
    });
  }

  @graphql.Mutation(() => QueueAction)
  async updateQueueAction(
    @graphql.Args() args: UpdateQueueActionArgs
  ): Promise<QueueAction | null> {
    try {
      return await this.service.updateQueueAction({
        ...args,
        data: {
          ...args.data,

          queues: {
            connect: args.data.queues,
          },

          users: {
            connect: args.data.users,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QueueAction)
  async deleteQueueAction(
    @graphql.Args() args: DeleteQueueActionArgs
  ): Promise<QueueAction | null> {
    try {
      return await this.service.deleteQueueAction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Queue, {
    nullable: true,
    name: "queues",
  })
  async getQueues(
    @graphql.Parent() parent: QueueAction
  ): Promise<Queue | null> {
    const result = await this.service.getQueues(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "users",
  })
  async getUsers(@graphql.Parent() parent: QueueAction): Promise<User | null> {
    const result = await this.service.getUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
