/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QueueActionService } from "../queueAction.service";
import { QueueActionCreateInput } from "./QueueActionCreateInput";
import { QueueAction } from "./QueueAction";
import { QueueActionFindManyArgs } from "./QueueActionFindManyArgs";
import { QueueActionWhereUniqueInput } from "./QueueActionWhereUniqueInput";
import { QueueActionUpdateInput } from "./QueueActionUpdateInput";

export class QueueActionControllerBase {
  constructor(protected readonly service: QueueActionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QueueAction })
  async createQueueAction(
    @common.Body() data: QueueActionCreateInput
  ): Promise<QueueAction> {
    return await this.service.createQueueAction({
      data: {
        ...data,

        queues: {
          connect: data.queues,
        },

        users: {
          connect: data.users,
        },
      },
      select: {
        actionTimestamp: true,
        actionType: true,
        details: true,
        id: true,

        queues: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QueueAction] })
  @ApiNestedQuery(QueueActionFindManyArgs)
  async queueActions(@common.Req() request: Request): Promise<QueueAction[]> {
    const args = plainToClass(QueueActionFindManyArgs, request.query);
    return this.service.queueActions({
      ...args,
      select: {
        actionTimestamp: true,
        actionType: true,
        details: true,
        id: true,

        queues: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QueueAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async queueAction(
    @common.Param() params: QueueActionWhereUniqueInput
  ): Promise<QueueAction | null> {
    const result = await this.service.queueAction({
      where: params,
      select: {
        actionTimestamp: true,
        actionType: true,
        details: true,
        id: true,

        queues: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QueueAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQueueAction(
    @common.Param() params: QueueActionWhereUniqueInput,
    @common.Body() data: QueueActionUpdateInput
  ): Promise<QueueAction | null> {
    try {
      return await this.service.updateQueueAction({
        where: params,
        data: {
          ...data,

          queues: {
            connect: data.queues,
          },

          users: {
            connect: data.users,
          },
        },
        select: {
          actionTimestamp: true,
          actionType: true,
          details: true,
          id: true,

          queues: {
            select: {
              id: true,
            },
          },

          users: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QueueAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQueueAction(
    @common.Param() params: QueueActionWhereUniqueInput
  ): Promise<QueueAction | null> {
    try {
      return await this.service.deleteQueueAction({
        where: params,
        select: {
          actionTimestamp: true,
          actionType: true,
          details: true,
          id: true,

          queues: {
            select: {
              id: true,
            },
          },

          users: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
