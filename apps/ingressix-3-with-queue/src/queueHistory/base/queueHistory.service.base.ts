/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  QueueHistory as PrismaQueueHistory,
  Queue as PrismaQueue,
} from "@prisma/client";

export class QueueHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QueueHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.queueHistory.count(args);
  }

  async queueHistories<T extends Prisma.QueueHistoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueueHistoryFindManyArgs>
  ): Promise<PrismaQueueHistory[]> {
    return this.prisma.queueHistory.findMany<Prisma.QueueHistoryFindManyArgs>(
      args
    );
  }
  async queueHistory<T extends Prisma.QueueHistoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueueHistoryFindUniqueArgs>
  ): Promise<PrismaQueueHistory | null> {
    return this.prisma.queueHistory.findUnique(args);
  }
  async createQueueHistory<T extends Prisma.QueueHistoryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueueHistoryCreateArgs>
  ): Promise<PrismaQueueHistory> {
    return this.prisma.queueHistory.create<T>(args);
  }
  async updateQueueHistory<T extends Prisma.QueueHistoryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueueHistoryUpdateArgs>
  ): Promise<PrismaQueueHistory> {
    return this.prisma.queueHistory.update<T>(args);
  }
  async deleteQueueHistory<T extends Prisma.QueueHistoryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.QueueHistoryDeleteArgs>
  ): Promise<PrismaQueueHistory> {
    return this.prisma.queueHistory.delete(args);
  }

  async getQueues(parentId: string): Promise<PrismaQueue | null> {
    return this.prisma.queueHistory
      .findUnique({
        where: { id: parentId },
      })
      .queues();
  }
}
