/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QueueHistoryService } from "../queueHistory.service";
import { QueueHistoryCreateInput } from "./QueueHistoryCreateInput";
import { QueueHistory } from "./QueueHistory";
import { QueueHistoryFindManyArgs } from "./QueueHistoryFindManyArgs";
import { QueueHistoryWhereUniqueInput } from "./QueueHistoryWhereUniqueInput";
import { QueueHistoryUpdateInput } from "./QueueHistoryUpdateInput";

export class QueueHistoryControllerBase {
  constructor(protected readonly service: QueueHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QueueHistory })
  async createQueueHistory(
    @common.Body() data: QueueHistoryCreateInput
  ): Promise<QueueHistory> {
    return await this.service.createQueueHistory({
      data: {
        ...data,

        queues: {
          connect: data.queues,
        },
      },
      select: {
        id: true,
        posicaoAtual: true,

        queues: {
          select: {
            id: true,
          },
        },

        recordedAt: true,
        status: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QueueHistory] })
  @ApiNestedQuery(QueueHistoryFindManyArgs)
  async queueHistories(
    @common.Req() request: Request
  ): Promise<QueueHistory[]> {
    const args = plainToClass(QueueHistoryFindManyArgs, request.query);
    return this.service.queueHistories({
      ...args,
      select: {
        id: true,
        posicaoAtual: true,

        queues: {
          select: {
            id: true,
          },
        },

        recordedAt: true,
        status: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QueueHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async queueHistory(
    @common.Param() params: QueueHistoryWhereUniqueInput
  ): Promise<QueueHistory | null> {
    const result = await this.service.queueHistory({
      where: params,
      select: {
        id: true,
        posicaoAtual: true,

        queues: {
          select: {
            id: true,
          },
        },

        recordedAt: true,
        status: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QueueHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQueueHistory(
    @common.Param() params: QueueHistoryWhereUniqueInput,
    @common.Body() data: QueueHistoryUpdateInput
  ): Promise<QueueHistory | null> {
    try {
      return await this.service.updateQueueHistory({
        where: params,
        data: {
          ...data,

          queues: {
            connect: data.queues,
          },
        },
        select: {
          id: true,
          posicaoAtual: true,

          queues: {
            select: {
              id: true,
            },
          },

          recordedAt: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QueueHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQueueHistory(
    @common.Param() params: QueueHistoryWhereUniqueInput
  ): Promise<QueueHistory | null> {
    try {
      return await this.service.deleteQueueHistory({
        where: params,
        select: {
          id: true,
          posicaoAtual: true,

          queues: {
            select: {
              id: true,
            },
          },

          recordedAt: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
