/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SessionService } from "../session.service";
import { SessionCreateInput } from "./SessionCreateInput";
import { Session } from "./Session";
import { SessionFindManyArgs } from "./SessionFindManyArgs";
import { SessionWhereUniqueInput } from "./SessionWhereUniqueInput";
import { SessionUpdateInput } from "./SessionUpdateInput";
import { OrderItemFindManyArgs } from "../../orderItem/base/OrderItemFindManyArgs";
import { OrderItem } from "../../orderItem/base/OrderItem";
import { OrderItemWhereUniqueInput } from "../../orderItem/base/OrderItemWhereUniqueInput";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { OrderWhereUniqueInput } from "../../order/base/OrderWhereUniqueInput";
import { QueuePositionFindManyArgs } from "../../queuePosition/base/QueuePositionFindManyArgs";
import { QueuePosition } from "../../queuePosition/base/QueuePosition";
import { QueuePositionWhereUniqueInput } from "../../queuePosition/base/QueuePositionWhereUniqueInput";
import { TicketFindManyArgs } from "../../ticket/base/TicketFindManyArgs";
import { Ticket } from "../../ticket/base/Ticket";
import { TicketWhereUniqueInput } from "../../ticket/base/TicketWhereUniqueInput";

export class SessionControllerBase {
  constructor(protected readonly service: SessionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Session })
  async createSession(
    @common.Body() data: SessionCreateInput
  ): Promise<Session> {
    return await this.service.createSession({
      data: {
        ...data,

        events: {
          connect: data.events,
        },
      },
      select: {
        events: {
          select: {
            id: true,
          },
        },

        id: true,
        maxTickets: true,
        remainingTickets: true,
        saleEndDate: true,
        saleStartDate: true,
        sessionDateTime: true,
        sessionStatus: true,
        sessionType: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Session] })
  @ApiNestedQuery(SessionFindManyArgs)
  async sessions(@common.Req() request: Request): Promise<Session[]> {
    const args = plainToClass(SessionFindManyArgs, request.query);
    return this.service.sessions({
      ...args,
      select: {
        events: {
          select: {
            id: true,
          },
        },

        id: true,
        maxTickets: true,
        remainingTickets: true,
        saleEndDate: true,
        saleStartDate: true,
        sessionDateTime: true,
        sessionStatus: true,
        sessionType: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Session })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async session(
    @common.Param() params: SessionWhereUniqueInput
  ): Promise<Session | null> {
    const result = await this.service.session({
      where: params,
      select: {
        events: {
          select: {
            id: true,
          },
        },

        id: true,
        maxTickets: true,
        remainingTickets: true,
        saleEndDate: true,
        saleStartDate: true,
        sessionDateTime: true,
        sessionStatus: true,
        sessionType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Session })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSession(
    @common.Param() params: SessionWhereUniqueInput,
    @common.Body() data: SessionUpdateInput
  ): Promise<Session | null> {
    try {
      return await this.service.updateSession({
        where: params,
        data: {
          ...data,

          events: {
            connect: data.events,
          },
        },
        select: {
          events: {
            select: {
              id: true,
            },
          },

          id: true,
          maxTickets: true,
          remainingTickets: true,
          saleEndDate: true,
          saleStartDate: true,
          sessionDateTime: true,
          sessionStatus: true,
          sessionType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Session })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSession(
    @common.Param() params: SessionWhereUniqueInput
  ): Promise<Session | null> {
    try {
      return await this.service.deleteSession({
        where: params,
        select: {
          events: {
            select: {
              id: true,
            },
          },

          id: true,
          maxTickets: true,
          remainingTickets: true,
          saleEndDate: true,
          saleStartDate: true,
          sessionDateTime: true,
          sessionStatus: true,
          sessionType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/orderItems")
  @ApiNestedQuery(OrderItemFindManyArgs)
  async findOrderItems(
    @common.Req() request: Request,
    @common.Param() params: SessionWhereUniqueInput
  ): Promise<OrderItem[]> {
    const query = plainToClass(OrderItemFindManyArgs, request.query);
    const results = await this.service.findOrderItems(params.id, {
      ...query,
      select: {
        id: true,
        orderItemDateTime: true,

        orders: {
          select: {
            id: true,
          },
        },

        sessions: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orderItems")
  async connectOrderItems(
    @common.Param() params: SessionWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        connect: body,
      },
    };
    await this.service.updateSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orderItems")
  async updateOrderItems(
    @common.Param() params: SessionWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        set: body,
      },
    };
    await this.service.updateSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orderItems")
  async disconnectOrderItems(
    @common.Param() params: SessionWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        disconnect: body,
      },
    };
    await this.service.updateSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/orders")
  @ApiNestedQuery(OrderFindManyArgs)
  async findOrders(
    @common.Req() request: Request,
    @common.Param() params: SessionWhereUniqueInput
  ): Promise<Order[]> {
    const query = plainToClass(OrderFindManyArgs, request.query);
    const results = await this.service.findOrders(params.id, {
      ...query,
      select: {
        acquisitionChannel: true,
        cancellationDate: true,
        confirmationDate: true,
        creationDate: true,

        customers: {
          select: {
            id: true,
          },
        },

        id: true,
        orderStatus: true,
        paymentMethod: true,
        paymentUuidCrd: true,
        paymentUuidOnPremises: true,
        pixCode: true,
        pixExpirationDate: true,
        pixExpirationTime: true,

        sessions: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orders")
  async connectOrders(
    @common.Param() params: SessionWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        connect: body,
      },
    };
    await this.service.updateSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orders")
  async updateOrders(
    @common.Param() params: SessionWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        set: body,
      },
    };
    await this.service.updateSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orders")
  async disconnectOrders(
    @common.Param() params: SessionWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        disconnect: body,
      },
    };
    await this.service.updateSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/queuePositions")
  @ApiNestedQuery(QueuePositionFindManyArgs)
  async findQueuePositions(
    @common.Req() request: Request,
    @common.Param() params: SessionWhereUniqueInput
  ): Promise<QueuePosition[]> {
    const query = plainToClass(QueuePositionFindManyArgs, request.query);
    const results = await this.service.findQueuePositions(params.id, {
      ...query,
      select: {
        id: true,
        joinedAt: true,
        posicaoAtual: true,
        priorityLevel: true,

        queues: {
          select: {
            id: true,
          },
        },

        sessions: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/queuePositions")
  async connectQueuePositions(
    @common.Param() params: SessionWhereUniqueInput,
    @common.Body() body: QueuePositionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuePositions: {
        connect: body,
      },
    };
    await this.service.updateSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/queuePositions")
  async updateQueuePositions(
    @common.Param() params: SessionWhereUniqueInput,
    @common.Body() body: QueuePositionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuePositions: {
        set: body,
      },
    };
    await this.service.updateSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/queuePositions")
  async disconnectQueuePositions(
    @common.Param() params: SessionWhereUniqueInput,
    @common.Body() body: QueuePositionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuePositions: {
        disconnect: body,
      },
    };
    await this.service.updateSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tickets")
  @ApiNestedQuery(TicketFindManyArgs)
  async findTickets(
    @common.Req() request: Request,
    @common.Param() params: SessionWhereUniqueInput
  ): Promise<Ticket[]> {
    const query = plainToClass(TicketFindManyArgs, request.query);
    const results = await this.service.findTickets(params.id, {
      ...query,
      select: {
        cancellationDate: true,
        id: true,
        price: true,
        priceCategory: true,
        priceDescription: true,
        qrCode: true,
        returnDeadline: true,
        seatCode: true,

        sessions: {
          select: {
            id: true,
          },
        },

        ticketStatus: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tickets")
  async connectTickets(
    @common.Param() params: SessionWhereUniqueInput,
    @common.Body() body: TicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tickets: {
        connect: body,
      },
    };
    await this.service.updateSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tickets")
  async updateTickets(
    @common.Param() params: SessionWhereUniqueInput,
    @common.Body() body: TicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tickets: {
        set: body,
      },
    };
    await this.service.updateSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tickets")
  async disconnectTickets(
    @common.Param() params: SessionWhereUniqueInput,
    @common.Body() body: TicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tickets: {
        disconnect: body,
      },
    };
    await this.service.updateSession({
      where: params,
      data,
      select: { id: true },
    });
  }
}
