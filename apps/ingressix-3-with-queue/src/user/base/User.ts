/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Customer } from "../../customer/base/Customer";
import { ValidateNested, IsOptional, IsString } from "class-validator";
import { Type } from "class-transformer";
import { Notification } from "../../notification/base/Notification";
import { QueueAction } from "../../queueAction/base/QueueAction";
import { QueuePosition } from "../../queuePosition/base/QueuePosition";

@ObjectType()
class User {
  @ApiProperty({
    required: false,
    type: () => Customer,
  })
  @ValidateNested()
  @Type(() => Customer)
  @IsOptional()
  customers?: Customer | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  email!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [Notification],
  })
  @ValidateNested()
  @Type(() => Notification)
  @IsOptional()
  notifications?: Array<Notification>;

  @ApiProperty({
    required: false,
    type: () => [QueueAction],
  })
  @ValidateNested()
  @Type(() => QueueAction)
  @IsOptional()
  queueActions?: Array<QueueAction>;

  @ApiProperty({
    required: false,
    type: () => [QueuePosition],
  })
  @ValidateNested()
  @Type(() => QueuePosition)
  @IsOptional()
  queuePositions?: Array<QueuePosition>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  role!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  userName!: string;
}

export { User as User };
