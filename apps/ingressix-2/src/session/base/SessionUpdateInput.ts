/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EventWhereUniqueInput } from "../../event/base/EventWhereUniqueInput";
import {
  ValidateNested,
  IsOptional,
  IsInt,
  IsDate,
  IsString,
} from "class-validator";
import { Type } from "class-transformer";
import { OrderUpdateManyWithoutSessionsInput } from "./OrderUpdateManyWithoutSessionsInput";
import { OrderItemUpdateManyWithoutSessionsInput } from "./OrderItemUpdateManyWithoutSessionsInput";
import { TicketUpdateManyWithoutSessionsInput } from "./TicketUpdateManyWithoutSessionsInput";

@InputType()
class SessionUpdateInput {
  @ApiProperty({
    required: false,
    type: () => EventWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => EventWhereUniqueInput)
  @IsOptional()
  @Field(() => EventWhereUniqueInput, {
    nullable: true,
  })
  event?: EventWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  maxTickets?: number;

  @ApiProperty({
    required: false,
    type: () => OrderUpdateManyWithoutSessionsInput,
  })
  @ValidateNested()
  @Type(() => OrderUpdateManyWithoutSessionsInput)
  @IsOptional()
  @Field(() => OrderUpdateManyWithoutSessionsInput, {
    nullable: true,
  })
  order?: OrderUpdateManyWithoutSessionsInput;

  @ApiProperty({
    required: false,
    type: () => OrderItemUpdateManyWithoutSessionsInput,
  })
  @ValidateNested()
  @Type(() => OrderItemUpdateManyWithoutSessionsInput)
  @IsOptional()
  @Field(() => OrderItemUpdateManyWithoutSessionsInput, {
    nullable: true,
  })
  orderItems?: OrderItemUpdateManyWithoutSessionsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  remainingTickets?: number;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  saleEndDate?: Date;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  saleStartDate?: Date;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  sessionDateTime?: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  sessionStatus?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  sessionType?: string;

  @ApiProperty({
    required: false,
    type: () => TicketUpdateManyWithoutSessionsInput,
  })
  @ValidateNested()
  @Type(() => TicketUpdateManyWithoutSessionsInput)
  @IsOptional()
  @Field(() => TicketUpdateManyWithoutSessionsInput, {
    nullable: true,
  })
  tickets?: TicketUpdateManyWithoutSessionsInput;
}

export { SessionUpdateInput as SessionUpdateInput };
