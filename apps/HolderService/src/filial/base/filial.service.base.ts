/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Filial as PrismaFilial } from "@prisma/client";

export class FilialServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FilialCountArgs, "select">): Promise<number> {
    return this.prisma.filial.count(args);
  }

  async filials<T extends Prisma.FilialFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FilialFindManyArgs>
  ): Promise<PrismaFilial[]> {
    return this.prisma.filial.findMany<Prisma.FilialFindManyArgs>(args);
  }
  async filial<T extends Prisma.FilialFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FilialFindUniqueArgs>
  ): Promise<PrismaFilial | null> {
    return this.prisma.filial.findUnique(args);
  }
  async createFilial<T extends Prisma.FilialCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FilialCreateArgs>
  ): Promise<PrismaFilial> {
    return this.prisma.filial.create<T>(args);
  }
  async updateFilial<T extends Prisma.FilialUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FilialUpdateArgs>
  ): Promise<PrismaFilial> {
    return this.prisma.filial.update<T>(args);
  }
  async deleteFilial<T extends Prisma.FilialDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FilialDeleteArgs>
  ): Promise<PrismaFilial> {
    return this.prisma.filial.delete(args);
  }
}
