/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContactAuthorization } from "./ContactAuthorization";
import { ContactAuthorizationCountArgs } from "./ContactAuthorizationCountArgs";
import { ContactAuthorizationFindManyArgs } from "./ContactAuthorizationFindManyArgs";
import { ContactAuthorizationFindUniqueArgs } from "./ContactAuthorizationFindUniqueArgs";
import { CreateContactAuthorizationArgs } from "./CreateContactAuthorizationArgs";
import { UpdateContactAuthorizationArgs } from "./UpdateContactAuthorizationArgs";
import { DeleteContactAuthorizationArgs } from "./DeleteContactAuthorizationArgs";
import { ContactAuthorizationService } from "../contactAuthorization.service";
@graphql.Resolver(() => ContactAuthorization)
export class ContactAuthorizationResolverBase {
  constructor(protected readonly service: ContactAuthorizationService) {}

  async _contactAuthorizationsMeta(
    @graphql.Args() args: ContactAuthorizationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContactAuthorization])
  async contactAuthorizations(
    @graphql.Args() args: ContactAuthorizationFindManyArgs
  ): Promise<ContactAuthorization[]> {
    return this.service.contactAuthorizations(args);
  }

  @graphql.Query(() => ContactAuthorization, { nullable: true })
  async contactAuthorization(
    @graphql.Args() args: ContactAuthorizationFindUniqueArgs
  ): Promise<ContactAuthorization | null> {
    const result = await this.service.contactAuthorization(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContactAuthorization)
  async createContactAuthorization(
    @graphql.Args() args: CreateContactAuthorizationArgs
  ): Promise<ContactAuthorization> {
    return await this.service.createContactAuthorization({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ContactAuthorization)
  async updateContactAuthorization(
    @graphql.Args() args: UpdateContactAuthorizationArgs
  ): Promise<ContactAuthorization | null> {
    try {
      return await this.service.updateContactAuthorization({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContactAuthorization)
  async deleteContactAuthorization(
    @graphql.Args() args: DeleteContactAuthorizationArgs
  ): Promise<ContactAuthorization | null> {
    try {
      return await this.service.deleteContactAuthorization(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
