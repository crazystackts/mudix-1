/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EditedFieldService } from "../editedField.service";
import { EditedFieldCreateInput } from "./EditedFieldCreateInput";
import { EditedField } from "./EditedField";
import { EditedFieldFindManyArgs } from "./EditedFieldFindManyArgs";
import { EditedFieldWhereUniqueInput } from "./EditedFieldWhereUniqueInput";
import { EditedFieldUpdateInput } from "./EditedFieldUpdateInput";

export class EditedFieldControllerBase {
  constructor(protected readonly service: EditedFieldService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EditedField })
  async createEditedField(
    @common.Body() data: EditedFieldCreateInput
  ): Promise<EditedField> {
    return await this.service.createEditedField({
      data: data,
      select: {
        fieldName: true,
        holderId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EditedField] })
  @ApiNestedQuery(EditedFieldFindManyArgs)
  async editedFields(@common.Req() request: Request): Promise<EditedField[]> {
    const args = plainToClass(EditedFieldFindManyArgs, request.query);
    return this.service.editedFields({
      ...args,
      select: {
        fieldName: true,
        holderId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EditedField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async editedField(
    @common.Param() params: EditedFieldWhereUniqueInput
  ): Promise<EditedField | null> {
    const result = await this.service.editedField({
      where: params,
      select: {
        fieldName: true,
        holderId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EditedField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEditedField(
    @common.Param() params: EditedFieldWhereUniqueInput,
    @common.Body() data: EditedFieldUpdateInput
  ): Promise<EditedField | null> {
    try {
      return await this.service.updateEditedField({
        where: params,
        data: data,
        select: {
          fieldName: true,
          holderId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EditedField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEditedField(
    @common.Param() params: EditedFieldWhereUniqueInput
  ): Promise<EditedField | null> {
    try {
      return await this.service.deleteEditedField({
        where: params,
        select: {
          fieldName: true,
          holderId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
