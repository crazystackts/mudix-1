/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DependentDocument as PrismaDependentDocument,
  Dependent as PrismaDependent,
} from "@prisma/client";

export class DependentDocumentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DependentDocumentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dependentDocument.count(args);
  }

  async dependentDocuments<T extends Prisma.DependentDocumentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentDocumentFindManyArgs>
  ): Promise<PrismaDependentDocument[]> {
    return this.prisma.dependentDocument.findMany<Prisma.DependentDocumentFindManyArgs>(
      args
    );
  }
  async dependentDocument<T extends Prisma.DependentDocumentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentDocumentFindUniqueArgs>
  ): Promise<PrismaDependentDocument | null> {
    return this.prisma.dependentDocument.findUnique(args);
  }
  async createDependentDocument<T extends Prisma.DependentDocumentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentDocumentCreateArgs>
  ): Promise<PrismaDependentDocument> {
    return this.prisma.dependentDocument.create<T>(args);
  }
  async updateDependentDocument<T extends Prisma.DependentDocumentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentDocumentUpdateArgs>
  ): Promise<PrismaDependentDocument> {
    return this.prisma.dependentDocument.update<T>(args);
  }
  async deleteDependentDocument<T extends Prisma.DependentDocumentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentDocumentDeleteArgs>
  ): Promise<PrismaDependentDocument> {
    return this.prisma.dependentDocument.delete(args);
  }

  async getDependents(parentId: string): Promise<PrismaDependent | null> {
    return this.prisma.dependentDocument
      .findUnique({
        where: { id: parentId },
      })
      .dependents();
  }
}
