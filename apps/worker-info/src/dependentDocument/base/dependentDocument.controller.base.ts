/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DependentDocumentService } from "../dependentDocument.service";
import { DependentDocumentCreateInput } from "./DependentDocumentCreateInput";
import { DependentDocument } from "./DependentDocument";
import { Request } from "../../request/base/Request";
import { DependentDocumentFindManyArgs } from "./DependentDocumentFindManyArgs";
import { DependentDocumentWhereUniqueInput } from "./DependentDocumentWhereUniqueInput";
import { DependentDocumentUpdateInput } from "./DependentDocumentUpdateInput";

export class DependentDocumentControllerBase {
  constructor(protected readonly service: DependentDocumentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DependentDocument })
  async createDependentDocument(
    @common.Body() data: DependentDocumentCreateInput
  ): Promise<DependentDocument> {
    return await this.service.createDependentDocument({
      data: {
        ...data,

        dependents: {
          connect: data.dependents,
        },
      },
      select: {
        dependents: {
          select: {
            id: true,
          },
        },

        id: true,
        issuer: true,
        numberField: true,
        typeField: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DependentDocument] })
  @ApiNestedQuery(DependentDocumentFindManyArgs)
  async dependentDocuments(
    @common.Req() request: Request
  ): Promise<DependentDocument[]> {
    const args = plainToClass(DependentDocumentFindManyArgs, request.query);
    return this.service.dependentDocuments({
      ...args,
      select: {
        dependents: {
          select: {
            id: true,
          },
        },

        id: true,
        issuer: true,
        numberField: true,
        typeField: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DependentDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dependentDocument(
    @common.Param() params: DependentDocumentWhereUniqueInput
  ): Promise<DependentDocument | null> {
    const result = await this.service.dependentDocument({
      where: params,
      select: {
        dependents: {
          select: {
            id: true,
          },
        },

        id: true,
        issuer: true,
        numberField: true,
        typeField: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DependentDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDependentDocument(
    @common.Param() params: DependentDocumentWhereUniqueInput,
    @common.Body() data: DependentDocumentUpdateInput
  ): Promise<DependentDocument | null> {
    try {
      return await this.service.updateDependentDocument({
        where: params,
        data: {
          ...data,

          dependents: {
            connect: data.dependents,
          },
        },
        select: {
          dependents: {
            select: {
              id: true,
            },
          },

          id: true,
          issuer: true,
          numberField: true,
          typeField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DependentDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDependentDocument(
    @common.Param() params: DependentDocumentWhereUniqueInput
  ): Promise<DependentDocument | null> {
    try {
      return await this.service.deleteDependentDocument({
        where: params,
        select: {
          dependents: {
            select: {
              id: true,
            },
          },

          id: true,
          issuer: true,
          numberField: true,
          typeField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
