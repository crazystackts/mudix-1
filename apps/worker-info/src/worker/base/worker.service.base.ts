/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Worker as PrismaWorker,
  Request as PrismaRequest,
} from "@prisma/client";

export class WorkerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WorkerCountArgs, "select">): Promise<number> {
    return this.prisma.worker.count(args);
  }

  async workers<T extends Prisma.WorkerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkerFindManyArgs>
  ): Promise<PrismaWorker[]> {
    return this.prisma.worker.findMany<Prisma.WorkerFindManyArgs>(args);
  }
  async worker<T extends Prisma.WorkerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkerFindUniqueArgs>
  ): Promise<PrismaWorker | null> {
    return this.prisma.worker.findUnique(args);
  }
  async createWorker<T extends Prisma.WorkerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkerCreateArgs>
  ): Promise<PrismaWorker> {
    return this.prisma.worker.create<T>(args);
  }
  async updateWorker<T extends Prisma.WorkerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkerUpdateArgs>
  ): Promise<PrismaWorker> {
    return this.prisma.worker.update<T>(args);
  }
  async deleteWorker<T extends Prisma.WorkerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkerDeleteArgs>
  ): Promise<PrismaWorker> {
    return this.prisma.worker.delete(args);
  }

  async findRequest(
    parentId: string,
    args: Prisma.RequestFindManyArgs
  ): Promise<PrismaRequest[]> {
    return this.prisma.worker
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .request(args);
  }
}
