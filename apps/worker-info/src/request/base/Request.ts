/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  ValidateNested,
  IsBoolean,
} from "class-validator";
import { Dependent } from "../../dependent/base/Dependent";
import { Type } from "class-transformer";
import { Holder } from "../../holder/base/Holder";
import { Worker } from "../../worker/base/Worker";

@ObjectType()
class Request {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  channel!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Dependent],
  })
  @ValidateNested()
  @Type(() => Dependent)
  @IsOptional()
  dependents?: Array<Dependent>;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  finalize!: boolean | null;

  @ApiProperty({
    required: false,
    type: () => [Holder],
  })
  @ValidateNested()
  @Type(() => Holder)
  @IsOptional()
  holder?: Array<Holder>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ip!: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  renewal!: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  step!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  typeField!: string | null;

  @ApiProperty({
    required: true,
    type: () => Worker,
  })
  @ValidateNested()
  @Type(() => Worker)
  worker?: Worker;
}

export { Request as Request };
