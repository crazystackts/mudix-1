/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RequestService } from "../request.service";
import { RequestCreateInput } from "./RequestCreateInput";
import { Request } from "./Request";
import { RequestFindManyArgs } from "./RequestFindManyArgs";
import { RequestWhereUniqueInput } from "./RequestWhereUniqueInput";
import { RequestUpdateInput } from "./RequestUpdateInput";
import { DependentFindManyArgs } from "../../dependent/base/DependentFindManyArgs";
import { Dependent } from "../../dependent/base/Dependent";
import { DependentWhereUniqueInput } from "../../dependent/base/DependentWhereUniqueInput";
import { HolderFindManyArgs } from "../../holder/base/HolderFindManyArgs";
import { Holder } from "../../holder/base/Holder";
import { HolderWhereUniqueInput } from "../../holder/base/HolderWhereUniqueInput";

export class RequestControllerBase {
  constructor(protected readonly service: RequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Request })
  async createRequest(
    @common.Body() data: RequestCreateInput
  ): Promise<Request> {
    return await this.service.createRequest({
      data: {
        ...data,

        worker: {
          connect: data.worker,
        },
      },
      select: {
        channel: true,
        finalize: true,
        id: true,
        ip: true,
        renewal: true,
        step: true,
        typeField: true,

        worker: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Request] })
  @ApiNestedQuery(RequestFindManyArgs)
  async requests(@common.Req() request: Request): Promise<Request[]> {
    const args = plainToClass(RequestFindManyArgs, request.query);
    return this.service.requests({
      ...args,
      select: {
        channel: true,
        finalize: true,
        id: true,
        ip: true,
        renewal: true,
        step: true,
        typeField: true,

        worker: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Request })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async request(
    @common.Param() params: RequestWhereUniqueInput
  ): Promise<Request | null> {
    const result = await this.service.request({
      where: params,
      select: {
        channel: true,
        finalize: true,
        id: true,
        ip: true,
        renewal: true,
        step: true,
        typeField: true,

        worker: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Request })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRequest(
    @common.Param() params: RequestWhereUniqueInput,
    @common.Body() data: RequestUpdateInput
  ): Promise<Request | null> {
    try {
      return await this.service.updateRequest({
        where: params,
        data: {
          ...data,

          worker: {
            connect: data.worker,
          },
        },
        select: {
          channel: true,
          finalize: true,
          id: true,
          ip: true,
          renewal: true,
          step: true,
          typeField: true,

          worker: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Request })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRequest(
    @common.Param() params: RequestWhereUniqueInput
  ): Promise<Request | null> {
    try {
      return await this.service.deleteRequest({
        where: params,
        select: {
          channel: true,
          finalize: true,
          id: true,
          ip: true,
          renewal: true,
          step: true,
          typeField: true,

          worker: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/dependents")
  @ApiNestedQuery(DependentFindManyArgs)
  async findDependents(
    @common.Req() request: Request,
    @common.Param() params: RequestWhereUniqueInput
  ): Promise<Dependent[]> {
    const query = plainToClass(DependentFindManyArgs, request.query);
    const results = await this.service.findDependents(params.id, {
      ...query,
      select: {
        affectionateFirstName: true,
        affectionateLastName: true,
        birthDate: true,
        complete: true,
        credential: true,

        dependentContactAuthorization: {
          select: {
            id: true,
          },
        },

        education: true,
        exclude: true,
        firstName: true,
        gender: true,
        id: true,
        lastName: true,
        maritalStatus: true,
        relationship: true,

        request: {
          select: {
            id: true,
          },
        },

        socialFirstName: true,
        socialLastName: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dependents")
  async connectDependents(
    @common.Param() params: RequestWhereUniqueInput,
    @common.Body() body: DependentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependents: {
        connect: body,
      },
    };
    await this.service.updateRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dependents")
  async updateDependents(
    @common.Param() params: RequestWhereUniqueInput,
    @common.Body() body: DependentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependents: {
        set: body,
      },
    };
    await this.service.updateRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dependents")
  async disconnectDependents(
    @common.Param() params: RequestWhereUniqueInput,
    @common.Body() body: DependentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependents: {
        disconnect: body,
      },
    };
    await this.service.updateRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/holder")
  @ApiNestedQuery(HolderFindManyArgs)
  async findHolder(
    @common.Req() request: Request,
    @common.Param() params: RequestWhereUniqueInput
  ): Promise<Holder[]> {
    const query = plainToClass(HolderFindManyArgs, request.query);
    const results = await this.service.findHolder(params.id, {
      ...query,
      select: {
        affectionateFirstName: true,
        affectionateGender: true,
        affectionateLastName: true,
        birthDate: true,

        contactAuthorization: {
          select: {
            id: true,
          },
        },

        education: true,
        firstName: true,
        gender: true,
        id: true,
        lastName: true,
        maritalStatus: true,

        request: {
          select: {
            id: true,
          },
        },

        socialFirstName: true,
        socialGender: true,
        socialLastName: true,
        token: true,
        typeField: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/holder")
  async connectHolder(
    @common.Param() params: RequestWhereUniqueInput,
    @common.Body() body: HolderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      holder: {
        connect: body,
      },
    };
    await this.service.updateRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/holder")
  async updateHolder(
    @common.Param() params: RequestWhereUniqueInput,
    @common.Body() body: HolderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      holder: {
        set: body,
      },
    };
    await this.service.updateRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/holder")
  async disconnectHolder(
    @common.Param() params: RequestWhereUniqueInput,
    @common.Body() body: HolderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      holder: {
        disconnect: body,
      },
    };
    await this.service.updateRequest({
      where: params,
      data,
      select: { id: true },
    });
  }
}
