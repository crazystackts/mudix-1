/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DependentFile } from "./DependentFile";
import { DependentFileCountArgs } from "./DependentFileCountArgs";
import { DependentFileFindManyArgs } from "./DependentFileFindManyArgs";
import { DependentFileFindUniqueArgs } from "./DependentFileFindUniqueArgs";
import { CreateDependentFileArgs } from "./CreateDependentFileArgs";
import { UpdateDependentFileArgs } from "./UpdateDependentFileArgs";
import { DeleteDependentFileArgs } from "./DeleteDependentFileArgs";
import { DependentAttachment } from "../../dependentAttachment/base/DependentAttachment";
import { DependentFileService } from "../dependentFile.service";
@graphql.Resolver(() => DependentFile)
export class DependentFileResolverBase {
  constructor(protected readonly service: DependentFileService) {}

  async _dependentFilesMeta(
    @graphql.Args() args: DependentFileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DependentFile])
  async dependentFiles(
    @graphql.Args() args: DependentFileFindManyArgs
  ): Promise<DependentFile[]> {
    return this.service.dependentFiles(args);
  }

  @graphql.Query(() => DependentFile, { nullable: true })
  async dependentFile(
    @graphql.Args() args: DependentFileFindUniqueArgs
  ): Promise<DependentFile | null> {
    const result = await this.service.dependentFile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DependentFile)
  async createDependentFile(
    @graphql.Args() args: CreateDependentFileArgs
  ): Promise<DependentFile> {
    return await this.service.createDependentFile({
      ...args,
      data: {
        ...args.data,

        dependentAttachments: {
          connect: args.data.dependentAttachments,
        },
      },
    });
  }

  @graphql.Mutation(() => DependentFile)
  async updateDependentFile(
    @graphql.Args() args: UpdateDependentFileArgs
  ): Promise<DependentFile | null> {
    try {
      return await this.service.updateDependentFile({
        ...args,
        data: {
          ...args.data,

          dependentAttachments: {
            connect: args.data.dependentAttachments,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DependentFile)
  async deleteDependentFile(
    @graphql.Args() args: DeleteDependentFileArgs
  ): Promise<DependentFile | null> {
    try {
      return await this.service.deleteDependentFile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => DependentAttachment, {
    nullable: true,
    name: "dependentAttachments",
  })
  async getDependentAttachments(
    @graphql.Parent() parent: DependentFile
  ): Promise<DependentAttachment | null> {
    const result = await this.service.getDependentAttachments(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
