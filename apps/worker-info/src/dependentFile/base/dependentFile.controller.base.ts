/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DependentFileService } from "../dependentFile.service";
import { DependentFileCreateInput } from "./DependentFileCreateInput";
import { DependentFile } from "./DependentFile";
import { Request } from "../../request/base/Request";
import { DependentFileFindManyArgs } from "./DependentFileFindManyArgs";
import { DependentFileWhereUniqueInput } from "./DependentFileWhereUniqueInput";
import { DependentFileUpdateInput } from "./DependentFileUpdateInput";

export class DependentFileControllerBase {
  constructor(protected readonly service: DependentFileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DependentFile })
  async createDependentFile(
    @common.Body() data: DependentFileCreateInput
  ): Promise<DependentFile> {
    return await this.service.createDependentFile({
      data: {
        ...data,

        dependentAttachments: {
          connect: data.dependentAttachments,
        },
      },
      select: {
        dependentAttachments: {
          select: {
            id: true,
          },
        },

        filename: true,
        id: true,
        name: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DependentFile] })
  @ApiNestedQuery(DependentFileFindManyArgs)
  async dependentFiles(
    @common.Req() request: Request
  ): Promise<DependentFile[]> {
    const args = plainToClass(DependentFileFindManyArgs, request.query);
    return this.service.dependentFiles({
      ...args,
      select: {
        dependentAttachments: {
          select: {
            id: true,
          },
        },

        filename: true,
        id: true,
        name: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DependentFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dependentFile(
    @common.Param() params: DependentFileWhereUniqueInput
  ): Promise<DependentFile | null> {
    const result = await this.service.dependentFile({
      where: params,
      select: {
        dependentAttachments: {
          select: {
            id: true,
          },
        },

        filename: true,
        id: true,
        name: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DependentFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDependentFile(
    @common.Param() params: DependentFileWhereUniqueInput,
    @common.Body() data: DependentFileUpdateInput
  ): Promise<DependentFile | null> {
    try {
      return await this.service.updateDependentFile({
        where: params,
        data: {
          ...data,

          dependentAttachments: {
            connect: data.dependentAttachments,
          },
        },
        select: {
          dependentAttachments: {
            select: {
              id: true,
            },
          },

          filename: true,
          id: true,
          name: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DependentFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDependentFile(
    @common.Param() params: DependentFileWhereUniqueInput
  ): Promise<DependentFile | null> {
    try {
      return await this.service.deleteDependentFile({
        where: params,
        select: {
          dependentAttachments: {
            select: {
              id: true,
            },
          },

          filename: true,
          id: true,
          name: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
