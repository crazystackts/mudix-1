/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Phone } from "./Phone";
import { PhoneCountArgs } from "./PhoneCountArgs";
import { PhoneFindManyArgs } from "./PhoneFindManyArgs";
import { PhoneFindUniqueArgs } from "./PhoneFindUniqueArgs";
import { CreatePhoneArgs } from "./CreatePhoneArgs";
import { UpdatePhoneArgs } from "./UpdatePhoneArgs";
import { DeletePhoneArgs } from "./DeletePhoneArgs";
import { Holder } from "../../holder/base/Holder";
import { PhoneService } from "../phone.service";
@graphql.Resolver(() => Phone)
export class PhoneResolverBase {
  constructor(protected readonly service: PhoneService) {}

  async _phonesMeta(
    @graphql.Args() args: PhoneCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Phone])
  async phones(@graphql.Args() args: PhoneFindManyArgs): Promise<Phone[]> {
    return this.service.phones(args);
  }

  @graphql.Query(() => Phone, { nullable: true })
  async phone(
    @graphql.Args() args: PhoneFindUniqueArgs
  ): Promise<Phone | null> {
    const result = await this.service.phone(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Phone)
  async createPhone(@graphql.Args() args: CreatePhoneArgs): Promise<Phone> {
    return await this.service.createPhone({
      ...args,
      data: {
        ...args.data,

        holder: {
          connect: args.data.holder,
        },
      },
    });
  }

  @graphql.Mutation(() => Phone)
  async updatePhone(
    @graphql.Args() args: UpdatePhoneArgs
  ): Promise<Phone | null> {
    try {
      return await this.service.updatePhone({
        ...args,
        data: {
          ...args.data,

          holder: {
            connect: args.data.holder,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Phone)
  async deletePhone(
    @graphql.Args() args: DeletePhoneArgs
  ): Promise<Phone | null> {
    try {
      return await this.service.deletePhone(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Holder, {
    nullable: true,
    name: "holder",
  })
  async getHolder(@graphql.Parent() parent: Phone): Promise<Holder | null> {
    const result = await this.service.getHolder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
