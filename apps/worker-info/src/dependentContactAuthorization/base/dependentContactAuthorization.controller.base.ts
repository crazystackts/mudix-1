/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DependentContactAuthorizationService } from "../dependentContactAuthorization.service";
import { DependentContactAuthorizationCreateInput } from "./DependentContactAuthorizationCreateInput";
import { DependentContactAuthorization } from "./DependentContactAuthorization";
import { Request } from "../../request/base/Request";
import { DependentContactAuthorizationFindManyArgs } from "./DependentContactAuthorizationFindManyArgs";
import { DependentContactAuthorizationWhereUniqueInput } from "./DependentContactAuthorizationWhereUniqueInput";
import { DependentContactAuthorizationUpdateInput } from "./DependentContactAuthorizationUpdateInput";

export class DependentContactAuthorizationControllerBase {
  constructor(
    protected readonly service: DependentContactAuthorizationService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DependentContactAuthorization })
  async createDependentContactAuthorization(
    @common.Body() data: DependentContactAuthorizationCreateInput
  ): Promise<DependentContactAuthorization> {
    return await this.service.createDependentContactAuthorization({
      data: {
        ...data,

        dependents: {
          connect: data.dependents,
        },
      },
      select: {
        dependents: {
          select: {
            id: true,
          },
        },

        email: true,
        id: true,
        push: true,
        sms: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DependentContactAuthorization] })
  @ApiNestedQuery(DependentContactAuthorizationFindManyArgs)
  async dependentContactAuthorizations(
    @common.Req() request: Request
  ): Promise<DependentContactAuthorization[]> {
    const args = plainToClass(
      DependentContactAuthorizationFindManyArgs,
      request.query
    );
    return this.service.dependentContactAuthorizations({
      ...args,
      select: {
        dependents: {
          select: {
            id: true,
          },
        },

        email: true,
        id: true,
        push: true,
        sms: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DependentContactAuthorization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dependentContactAuthorization(
    @common.Param() params: DependentContactAuthorizationWhereUniqueInput
  ): Promise<DependentContactAuthorization | null> {
    const result = await this.service.dependentContactAuthorization({
      where: params,
      select: {
        dependents: {
          select: {
            id: true,
          },
        },

        email: true,
        id: true,
        push: true,
        sms: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DependentContactAuthorization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDependentContactAuthorization(
    @common.Param() params: DependentContactAuthorizationWhereUniqueInput,
    @common.Body() data: DependentContactAuthorizationUpdateInput
  ): Promise<DependentContactAuthorization | null> {
    try {
      return await this.service.updateDependentContactAuthorization({
        where: params,
        data: {
          ...data,

          dependents: {
            connect: data.dependents,
          },
        },
        select: {
          dependents: {
            select: {
              id: true,
            },
          },

          email: true,
          id: true,
          push: true,
          sms: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DependentContactAuthorization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDependentContactAuthorization(
    @common.Param() params: DependentContactAuthorizationWhereUniqueInput
  ): Promise<DependentContactAuthorization | null> {
    try {
      return await this.service.deleteDependentContactAuthorization({
        where: params,
        select: {
          dependents: {
            select: {
              id: true,
            },
          },

          email: true,
          id: true,
          push: true,
          sms: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
