/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DependentContactAuthorization } from "./DependentContactAuthorization";
import { DependentContactAuthorizationCountArgs } from "./DependentContactAuthorizationCountArgs";
import { DependentContactAuthorizationFindManyArgs } from "./DependentContactAuthorizationFindManyArgs";
import { DependentContactAuthorizationFindUniqueArgs } from "./DependentContactAuthorizationFindUniqueArgs";
import { CreateDependentContactAuthorizationArgs } from "./CreateDependentContactAuthorizationArgs";
import { UpdateDependentContactAuthorizationArgs } from "./UpdateDependentContactAuthorizationArgs";
import { DeleteDependentContactAuthorizationArgs } from "./DeleteDependentContactAuthorizationArgs";
import { Dependent } from "../../dependent/base/Dependent";
import { DependentContactAuthorizationService } from "../dependentContactAuthorization.service";
@graphql.Resolver(() => DependentContactAuthorization)
export class DependentContactAuthorizationResolverBase {
  constructor(
    protected readonly service: DependentContactAuthorizationService
  ) {}

  async _dependentContactAuthorizationsMeta(
    @graphql.Args() args: DependentContactAuthorizationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DependentContactAuthorization])
  async dependentContactAuthorizations(
    @graphql.Args() args: DependentContactAuthorizationFindManyArgs
  ): Promise<DependentContactAuthorization[]> {
    return this.service.dependentContactAuthorizations(args);
  }

  @graphql.Query(() => DependentContactAuthorization, { nullable: true })
  async dependentContactAuthorization(
    @graphql.Args() args: DependentContactAuthorizationFindUniqueArgs
  ): Promise<DependentContactAuthorization | null> {
    const result = await this.service.dependentContactAuthorization(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DependentContactAuthorization)
  async createDependentContactAuthorization(
    @graphql.Args() args: CreateDependentContactAuthorizationArgs
  ): Promise<DependentContactAuthorization> {
    return await this.service.createDependentContactAuthorization({
      ...args,
      data: {
        ...args.data,

        dependents: {
          connect: args.data.dependents,
        },
      },
    });
  }

  @graphql.Mutation(() => DependentContactAuthorization)
  async updateDependentContactAuthorization(
    @graphql.Args() args: UpdateDependentContactAuthorizationArgs
  ): Promise<DependentContactAuthorization | null> {
    try {
      return await this.service.updateDependentContactAuthorization({
        ...args,
        data: {
          ...args.data,

          dependents: {
            connect: args.data.dependents,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DependentContactAuthorization)
  async deleteDependentContactAuthorization(
    @graphql.Args() args: DeleteDependentContactAuthorizationArgs
  ): Promise<DependentContactAuthorization | null> {
    try {
      return await this.service.deleteDependentContactAuthorization(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Dependent, {
    nullable: true,
    name: "dependents",
  })
  async getDependents(
    @graphql.Parent() parent: DependentContactAuthorization
  ): Promise<Dependent | null> {
    const result = await this.service.getDependents(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
