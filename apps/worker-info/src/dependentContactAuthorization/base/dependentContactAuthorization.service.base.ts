/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DependentContactAuthorization as PrismaDependentContactAuthorization,
  Dependent as PrismaDependent,
} from "@prisma/client";

export class DependentContactAuthorizationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DependentContactAuthorizationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dependentContactAuthorization.count(args);
  }

  async dependentContactAuthorizations<
    T extends Prisma.DependentContactAuthorizationFindManyArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.DependentContactAuthorizationFindManyArgs
    >
  ): Promise<PrismaDependentContactAuthorization[]> {
    return this.prisma.dependentContactAuthorization.findMany<Prisma.DependentContactAuthorizationFindManyArgs>(
      args
    );
  }
  async dependentContactAuthorization<
    T extends Prisma.DependentContactAuthorizationFindUniqueArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.DependentContactAuthorizationFindUniqueArgs
    >
  ): Promise<PrismaDependentContactAuthorization | null> {
    return this.prisma.dependentContactAuthorization.findUnique(args);
  }
  async createDependentContactAuthorization<
    T extends Prisma.DependentContactAuthorizationCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DependentContactAuthorizationCreateArgs>
  ): Promise<PrismaDependentContactAuthorization> {
    return this.prisma.dependentContactAuthorization.create<T>(args);
  }
  async updateDependentContactAuthorization<
    T extends Prisma.DependentContactAuthorizationUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DependentContactAuthorizationUpdateArgs>
  ): Promise<PrismaDependentContactAuthorization> {
    return this.prisma.dependentContactAuthorization.update<T>(args);
  }
  async deleteDependentContactAuthorization<
    T extends Prisma.DependentContactAuthorizationDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DependentContactAuthorizationDeleteArgs>
  ): Promise<PrismaDependentContactAuthorization> {
    return this.prisma.dependentContactAuthorization.delete(args);
  }

  async getDependents(parentId: string): Promise<PrismaDependent | null> {
    return this.prisma.dependentContactAuthorization
      .findUnique({
        where: { id: parentId },
      })
      .dependents();
  }
}
