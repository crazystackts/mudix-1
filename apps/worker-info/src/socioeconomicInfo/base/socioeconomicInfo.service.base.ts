/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SocioeconomicInfo as PrismaSocioeconomicInfo,
  Holder as PrismaHolder,
} from "@prisma/client";

export class SocioeconomicInfoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SocioeconomicInfoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.socioeconomicInfo.count(args);
  }

  async socioeconomicInfos<T extends Prisma.SocioeconomicInfoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocioeconomicInfoFindManyArgs>
  ): Promise<PrismaSocioeconomicInfo[]> {
    return this.prisma.socioeconomicInfo.findMany<Prisma.SocioeconomicInfoFindManyArgs>(
      args
    );
  }
  async socioeconomicInfo<T extends Prisma.SocioeconomicInfoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocioeconomicInfoFindUniqueArgs>
  ): Promise<PrismaSocioeconomicInfo | null> {
    return this.prisma.socioeconomicInfo.findUnique(args);
  }
  async createSocioeconomicInfo<T extends Prisma.SocioeconomicInfoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocioeconomicInfoCreateArgs>
  ): Promise<PrismaSocioeconomicInfo> {
    return this.prisma.socioeconomicInfo.create<T>(args);
  }
  async updateSocioeconomicInfo<T extends Prisma.SocioeconomicInfoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocioeconomicInfoUpdateArgs>
  ): Promise<PrismaSocioeconomicInfo> {
    return this.prisma.socioeconomicInfo.update<T>(args);
  }
  async deleteSocioeconomicInfo<T extends Prisma.SocioeconomicInfoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocioeconomicInfoDeleteArgs>
  ): Promise<PrismaSocioeconomicInfo> {
    return this.prisma.socioeconomicInfo.delete(args);
  }

  async getHolder(parentId: string): Promise<PrismaHolder | null> {
    return this.prisma.socioeconomicInfo
      .findUnique({
        where: { id: parentId },
      })
      .holder();
  }
}
