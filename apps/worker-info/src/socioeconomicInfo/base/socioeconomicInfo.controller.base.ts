/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SocioeconomicInfoService } from "../socioeconomicInfo.service";
import { SocioeconomicInfoCreateInput } from "./SocioeconomicInfoCreateInput";
import { SocioeconomicInfo } from "./SocioeconomicInfo";
import { Request } from "../../request/base/Request";
import { SocioeconomicInfoFindManyArgs } from "./SocioeconomicInfoFindManyArgs";
import { SocioeconomicInfoWhereUniqueInput } from "./SocioeconomicInfoWhereUniqueInput";
import { SocioeconomicInfoUpdateInput } from "./SocioeconomicInfoUpdateInput";

export class SocioeconomicInfoControllerBase {
  constructor(protected readonly service: SocioeconomicInfoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SocioeconomicInfo })
  async createSocioeconomicInfo(
    @common.Body() data: SocioeconomicInfoCreateInput
  ): Promise<SocioeconomicInfo> {
    return await this.service.createSocioeconomicInfo({
      data: {
        ...data,

        holder: {
          connect: data.holder,
        },
      },
      select: {
        familyIncomeCode: true,
        familyIncomeTitle: true,

        holder: {
          select: {
            id: true,
          },
        },

        id: true,
        salaryCode: true,
        salaryTitle: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SocioeconomicInfo] })
  @ApiNestedQuery(SocioeconomicInfoFindManyArgs)
  async socioeconomicInfos(
    @common.Req() request: Request
  ): Promise<SocioeconomicInfo[]> {
    const args = plainToClass(SocioeconomicInfoFindManyArgs, request.query);
    return this.service.socioeconomicInfos({
      ...args,
      select: {
        familyIncomeCode: true,
        familyIncomeTitle: true,

        holder: {
          select: {
            id: true,
          },
        },

        id: true,
        salaryCode: true,
        salaryTitle: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SocioeconomicInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async socioeconomicInfo(
    @common.Param() params: SocioeconomicInfoWhereUniqueInput
  ): Promise<SocioeconomicInfo | null> {
    const result = await this.service.socioeconomicInfo({
      where: params,
      select: {
        familyIncomeCode: true,
        familyIncomeTitle: true,

        holder: {
          select: {
            id: true,
          },
        },

        id: true,
        salaryCode: true,
        salaryTitle: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SocioeconomicInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSocioeconomicInfo(
    @common.Param() params: SocioeconomicInfoWhereUniqueInput,
    @common.Body() data: SocioeconomicInfoUpdateInput
  ): Promise<SocioeconomicInfo | null> {
    try {
      return await this.service.updateSocioeconomicInfo({
        where: params,
        data: {
          ...data,

          holder: {
            connect: data.holder,
          },
        },
        select: {
          familyIncomeCode: true,
          familyIncomeTitle: true,

          holder: {
            select: {
              id: true,
            },
          },

          id: true,
          salaryCode: true,
          salaryTitle: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SocioeconomicInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSocioeconomicInfo(
    @common.Param() params: SocioeconomicInfoWhereUniqueInput
  ): Promise<SocioeconomicInfo | null> {
    try {
      return await this.service.deleteSocioeconomicInfo({
        where: params,
        select: {
          familyIncomeCode: true,
          familyIncomeTitle: true,

          holder: {
            select: {
              id: true,
            },
          },

          id: true,
          salaryCode: true,
          salaryTitle: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
