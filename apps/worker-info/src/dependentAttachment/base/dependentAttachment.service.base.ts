/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DependentAttachment as PrismaDependentAttachment,
  DependentFile as PrismaDependentFile,
  Dependent as PrismaDependent,
} from "@prisma/client";

export class DependentAttachmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DependentAttachmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dependentAttachment.count(args);
  }

  async dependentAttachments<T extends Prisma.DependentAttachmentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentAttachmentFindManyArgs>
  ): Promise<PrismaDependentAttachment[]> {
    return this.prisma.dependentAttachment.findMany<Prisma.DependentAttachmentFindManyArgs>(
      args
    );
  }
  async dependentAttachment<T extends Prisma.DependentAttachmentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DependentAttachmentFindUniqueArgs>
  ): Promise<PrismaDependentAttachment | null> {
    return this.prisma.dependentAttachment.findUnique(args);
  }
  async createDependentAttachment<
    T extends Prisma.DependentAttachmentCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DependentAttachmentCreateArgs>
  ): Promise<PrismaDependentAttachment> {
    return this.prisma.dependentAttachment.create<T>(args);
  }
  async updateDependentAttachment<
    T extends Prisma.DependentAttachmentUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DependentAttachmentUpdateArgs>
  ): Promise<PrismaDependentAttachment> {
    return this.prisma.dependentAttachment.update<T>(args);
  }
  async deleteDependentAttachment<
    T extends Prisma.DependentAttachmentDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DependentAttachmentDeleteArgs>
  ): Promise<PrismaDependentAttachment> {
    return this.prisma.dependentAttachment.delete(args);
  }

  async findDependentFiles(
    parentId: string,
    args: Prisma.DependentFileFindManyArgs
  ): Promise<PrismaDependentFile[]> {
    return this.prisma.dependentAttachment
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .dependentFiles(args);
  }

  async getDependents(parentId: string): Promise<PrismaDependent | null> {
    return this.prisma.dependentAttachment
      .findUnique({
        where: { id: parentId },
      })
      .dependents();
  }
}
