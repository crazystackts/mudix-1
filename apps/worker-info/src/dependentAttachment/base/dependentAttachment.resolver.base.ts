/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DependentAttachment } from "./DependentAttachment";
import { DependentAttachmentCountArgs } from "./DependentAttachmentCountArgs";
import { DependentAttachmentFindManyArgs } from "./DependentAttachmentFindManyArgs";
import { DependentAttachmentFindUniqueArgs } from "./DependentAttachmentFindUniqueArgs";
import { CreateDependentAttachmentArgs } from "./CreateDependentAttachmentArgs";
import { UpdateDependentAttachmentArgs } from "./UpdateDependentAttachmentArgs";
import { DeleteDependentAttachmentArgs } from "./DeleteDependentAttachmentArgs";
import { DependentFileFindManyArgs } from "../../dependentFile/base/DependentFileFindManyArgs";
import { DependentFile } from "../../dependentFile/base/DependentFile";
import { Dependent } from "../../dependent/base/Dependent";
import { DependentAttachmentService } from "../dependentAttachment.service";
@graphql.Resolver(() => DependentAttachment)
export class DependentAttachmentResolverBase {
  constructor(protected readonly service: DependentAttachmentService) {}

  async _dependentAttachmentsMeta(
    @graphql.Args() args: DependentAttachmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DependentAttachment])
  async dependentAttachments(
    @graphql.Args() args: DependentAttachmentFindManyArgs
  ): Promise<DependentAttachment[]> {
    return this.service.dependentAttachments(args);
  }

  @graphql.Query(() => DependentAttachment, { nullable: true })
  async dependentAttachment(
    @graphql.Args() args: DependentAttachmentFindUniqueArgs
  ): Promise<DependentAttachment | null> {
    const result = await this.service.dependentAttachment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DependentAttachment)
  async createDependentAttachment(
    @graphql.Args() args: CreateDependentAttachmentArgs
  ): Promise<DependentAttachment> {
    return await this.service.createDependentAttachment({
      ...args,
      data: {
        ...args.data,

        dependents: {
          connect: args.data.dependents,
        },
      },
    });
  }

  @graphql.Mutation(() => DependentAttachment)
  async updateDependentAttachment(
    @graphql.Args() args: UpdateDependentAttachmentArgs
  ): Promise<DependentAttachment | null> {
    try {
      return await this.service.updateDependentAttachment({
        ...args,
        data: {
          ...args.data,

          dependents: {
            connect: args.data.dependents,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DependentAttachment)
  async deleteDependentAttachment(
    @graphql.Args() args: DeleteDependentAttachmentArgs
  ): Promise<DependentAttachment | null> {
    try {
      return await this.service.deleteDependentAttachment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [DependentFile], { name: "dependentFiles" })
  async findDependentFiles(
    @graphql.Parent() parent: DependentAttachment,
    @graphql.Args() args: DependentFileFindManyArgs
  ): Promise<DependentFile[]> {
    const results = await this.service.findDependentFiles(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Dependent, {
    nullable: true,
    name: "dependents",
  })
  async getDependents(
    @graphql.Parent() parent: DependentAttachment
  ): Promise<Dependent | null> {
    const result = await this.service.getDependents(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
