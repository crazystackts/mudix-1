/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FilialService } from "../filial.service";
import { FilialCreateInput } from "./FilialCreateInput";
import { Filial } from "./Filial";
import { Request } from "../../request/base/Request";
import { FilialFindManyArgs } from "./FilialFindManyArgs";
import { FilialWhereUniqueInput } from "./FilialWhereUniqueInput";
import { FilialUpdateInput } from "./FilialUpdateInput";

export class FilialControllerBase {
  constructor(protected readonly service: FilialService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Filial })
  async createFilial(@common.Body() data: FilialCreateInput): Promise<Filial> {
    return await this.service.createFilial({
      data: {
        ...data,

        holder: {
          connect: data.holder,
        },
      },
      select: {
        firstName: true,

        holder: {
          select: {
            id: true,
          },
        },

        id: true,
        lastName: true,
        typeField: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Filial] })
  @ApiNestedQuery(FilialFindManyArgs)
  async filials(@common.Req() request: Request): Promise<Filial[]> {
    const args = plainToClass(FilialFindManyArgs, request.query);
    return this.service.filials({
      ...args,
      select: {
        firstName: true,

        holder: {
          select: {
            id: true,
          },
        },

        id: true,
        lastName: true,
        typeField: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Filial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async filial(
    @common.Param() params: FilialWhereUniqueInput
  ): Promise<Filial | null> {
    const result = await this.service.filial({
      where: params,
      select: {
        firstName: true,

        holder: {
          select: {
            id: true,
          },
        },

        id: true,
        lastName: true,
        typeField: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Filial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFilial(
    @common.Param() params: FilialWhereUniqueInput,
    @common.Body() data: FilialUpdateInput
  ): Promise<Filial | null> {
    try {
      return await this.service.updateFilial({
        where: params,
        data: {
          ...data,

          holder: {
            connect: data.holder,
          },
        },
        select: {
          firstName: true,

          holder: {
            select: {
              id: true,
            },
          },

          id: true,
          lastName: true,
          typeField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Filial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFilial(
    @common.Param() params: FilialWhereUniqueInput
  ): Promise<Filial | null> {
    try {
      return await this.service.deleteFilial({
        where: params,
        select: {
          firstName: true,

          holder: {
            select: {
              id: true,
            },
          },

          id: true,
          lastName: true,
          typeField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
