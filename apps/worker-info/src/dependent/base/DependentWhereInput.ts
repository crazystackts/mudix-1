/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested } from "class-validator";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { BooleanNullableFilter } from "../../util/BooleanNullableFilter";
import { DependentAddressListRelationFilter } from "../../dependentAddress/base/DependentAddressListRelationFilter";
import { DependentAttachmentListRelationFilter } from "../../dependentAttachment/base/DependentAttachmentListRelationFilter";
import { DependentContactAuthorizationWhereUniqueInput } from "../../dependentContactAuthorization/base/DependentContactAuthorizationWhereUniqueInput";
import { DependentContactListRelationFilter } from "../../dependentContact/base/DependentContactListRelationFilter";
import { DependentDocumentListRelationFilter } from "../../dependentDocument/base/DependentDocumentListRelationFilter";
import { DependentPhoneListRelationFilter } from "../../dependentPhone/base/DependentPhoneListRelationFilter";
import { StringFilter } from "../../util/StringFilter";
import { RequestWhereUniqueInput } from "../../request/base/RequestWhereUniqueInput";

@InputType()
class DependentWhereInput {
  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  affectionateFirstName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  affectionateLastName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  birthDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  complete?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  credential?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => DependentAddressListRelationFilter,
  })
  @ValidateNested()
  @Type(() => DependentAddressListRelationFilter)
  @IsOptional()
  @Field(() => DependentAddressListRelationFilter, {
    nullable: true,
  })
  dependentAddresses?: DependentAddressListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => DependentAttachmentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => DependentAttachmentListRelationFilter)
  @IsOptional()
  @Field(() => DependentAttachmentListRelationFilter, {
    nullable: true,
  })
  dependentAttachments?: DependentAttachmentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => DependentContactAuthorizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DependentContactAuthorizationWhereUniqueInput)
  @IsOptional()
  @Field(() => DependentContactAuthorizationWhereUniqueInput, {
    nullable: true,
  })
  dependentContactAuthorization?: DependentContactAuthorizationWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => DependentContactListRelationFilter,
  })
  @ValidateNested()
  @Type(() => DependentContactListRelationFilter)
  @IsOptional()
  @Field(() => DependentContactListRelationFilter, {
    nullable: true,
  })
  dependentContacts?: DependentContactListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => DependentDocumentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => DependentDocumentListRelationFilter)
  @IsOptional()
  @Field(() => DependentDocumentListRelationFilter, {
    nullable: true,
  })
  dependentDocuments?: DependentDocumentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => DependentPhoneListRelationFilter,
  })
  @ValidateNested()
  @Type(() => DependentPhoneListRelationFilter)
  @IsOptional()
  @Field(() => DependentPhoneListRelationFilter, {
    nullable: true,
  })
  dependentPhones?: DependentPhoneListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  education?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  exclude?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  firstName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  gender?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  lastName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  maritalStatus?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  relationship?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => RequestWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => RequestWhereUniqueInput)
  @IsOptional()
  @Field(() => RequestWhereUniqueInput, {
    nullable: true,
  })
  request?: RequestWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  socialFirstName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  socialLastName?: StringNullableFilter;
}

export { DependentWhereInput as DependentWhereInput };
