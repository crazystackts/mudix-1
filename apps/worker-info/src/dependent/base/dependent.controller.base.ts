/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DependentService } from "../dependent.service";
import { DependentCreateInput } from "./DependentCreateInput";
import { Dependent } from "./Dependent";
import { Request } from "../../request/base/Request";
import { DependentFindManyArgs } from "./DependentFindManyArgs";
import { DependentWhereUniqueInput } from "./DependentWhereUniqueInput";
import { DependentUpdateInput } from "./DependentUpdateInput";
import { DependentAddressFindManyArgs } from "../../dependentAddress/base/DependentAddressFindManyArgs";
import { DependentAddress } from "../../dependentAddress/base/DependentAddress";
import { DependentAddressWhereUniqueInput } from "../../dependentAddress/base/DependentAddressWhereUniqueInput";
import { DependentAttachmentFindManyArgs } from "../../dependentAttachment/base/DependentAttachmentFindManyArgs";
import { DependentAttachment } from "../../dependentAttachment/base/DependentAttachment";
import { DependentAttachmentWhereUniqueInput } from "../../dependentAttachment/base/DependentAttachmentWhereUniqueInput";
import { DependentContactFindManyArgs } from "../../dependentContact/base/DependentContactFindManyArgs";
import { DependentContact } from "../../dependentContact/base/DependentContact";
import { DependentContactWhereUniqueInput } from "../../dependentContact/base/DependentContactWhereUniqueInput";
import { DependentDocumentFindManyArgs } from "../../dependentDocument/base/DependentDocumentFindManyArgs";
import { DependentDocument } from "../../dependentDocument/base/DependentDocument";
import { DependentDocumentWhereUniqueInput } from "../../dependentDocument/base/DependentDocumentWhereUniqueInput";
import { DependentPhoneFindManyArgs } from "../../dependentPhone/base/DependentPhoneFindManyArgs";
import { DependentPhone } from "../../dependentPhone/base/DependentPhone";
import { DependentPhoneWhereUniqueInput } from "../../dependentPhone/base/DependentPhoneWhereUniqueInput";

export class DependentControllerBase {
  constructor(protected readonly service: DependentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Dependent })
  async createDependent(
    @common.Body() data: DependentCreateInput
  ): Promise<Dependent> {
    return await this.service.createDependent({
      data: {
        ...data,

        dependentContactAuthorization: data.dependentContactAuthorization
          ? {
              connect: data.dependentContactAuthorization,
            }
          : undefined,

        request: {
          connect: data.request,
        },
      },
      select: {
        affectionateFirstName: true,
        affectionateLastName: true,
        birthDate: true,
        complete: true,
        credential: true,

        dependentContactAuthorization: {
          select: {
            id: true,
          },
        },

        education: true,
        exclude: true,
        firstName: true,
        gender: true,
        id: true,
        lastName: true,
        maritalStatus: true,
        relationship: true,

        request: {
          select: {
            id: true,
          },
        },

        socialFirstName: true,
        socialLastName: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Dependent] })
  @ApiNestedQuery(DependentFindManyArgs)
  async dependents(@common.Req() request: Request): Promise<Dependent[]> {
    const args = plainToClass(DependentFindManyArgs, request.query);
    return this.service.dependents({
      ...args,
      select: {
        affectionateFirstName: true,
        affectionateLastName: true,
        birthDate: true,
        complete: true,
        credential: true,

        dependentContactAuthorization: {
          select: {
            id: true,
          },
        },

        education: true,
        exclude: true,
        firstName: true,
        gender: true,
        id: true,
        lastName: true,
        maritalStatus: true,
        relationship: true,

        request: {
          select: {
            id: true,
          },
        },

        socialFirstName: true,
        socialLastName: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Dependent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dependent(
    @common.Param() params: DependentWhereUniqueInput
  ): Promise<Dependent | null> {
    const result = await this.service.dependent({
      where: params,
      select: {
        affectionateFirstName: true,
        affectionateLastName: true,
        birthDate: true,
        complete: true,
        credential: true,

        dependentContactAuthorization: {
          select: {
            id: true,
          },
        },

        education: true,
        exclude: true,
        firstName: true,
        gender: true,
        id: true,
        lastName: true,
        maritalStatus: true,
        relationship: true,

        request: {
          select: {
            id: true,
          },
        },

        socialFirstName: true,
        socialLastName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Dependent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDependent(
    @common.Param() params: DependentWhereUniqueInput,
    @common.Body() data: DependentUpdateInput
  ): Promise<Dependent | null> {
    try {
      return await this.service.updateDependent({
        where: params,
        data: {
          ...data,

          dependentContactAuthorization: data.dependentContactAuthorization
            ? {
                connect: data.dependentContactAuthorization,
              }
            : undefined,

          request: {
            connect: data.request,
          },
        },
        select: {
          affectionateFirstName: true,
          affectionateLastName: true,
          birthDate: true,
          complete: true,
          credential: true,

          dependentContactAuthorization: {
            select: {
              id: true,
            },
          },

          education: true,
          exclude: true,
          firstName: true,
          gender: true,
          id: true,
          lastName: true,
          maritalStatus: true,
          relationship: true,

          request: {
            select: {
              id: true,
            },
          },

          socialFirstName: true,
          socialLastName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Dependent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDependent(
    @common.Param() params: DependentWhereUniqueInput
  ): Promise<Dependent | null> {
    try {
      return await this.service.deleteDependent({
        where: params,
        select: {
          affectionateFirstName: true,
          affectionateLastName: true,
          birthDate: true,
          complete: true,
          credential: true,

          dependentContactAuthorization: {
            select: {
              id: true,
            },
          },

          education: true,
          exclude: true,
          firstName: true,
          gender: true,
          id: true,
          lastName: true,
          maritalStatus: true,
          relationship: true,

          request: {
            select: {
              id: true,
            },
          },

          socialFirstName: true,
          socialLastName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/dependentAddresses")
  @ApiNestedQuery(DependentAddressFindManyArgs)
  async findDependentAddresses(
    @common.Req() request: Request,
    @common.Param() params: DependentWhereUniqueInput
  ): Promise<DependentAddress[]> {
    const query = plainToClass(DependentAddressFindManyArgs, request.query);
    const results = await this.service.findDependentAddresses(params.id, {
      ...query,
      select: {
        city: true,
        complement: true,

        dependents: {
          select: {
            id: true,
          },
        },

        id: true,
        neighborhood: true,
        numberField: true,
        state: true,
        street: true,
        title: true,
        zip: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dependentAddresses")
  async connectDependentAddresses(
    @common.Param() params: DependentWhereUniqueInput,
    @common.Body() body: DependentAddressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentAddresses: {
        connect: body,
      },
    };
    await this.service.updateDependent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dependentAddresses")
  async updateDependentAddresses(
    @common.Param() params: DependentWhereUniqueInput,
    @common.Body() body: DependentAddressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentAddresses: {
        set: body,
      },
    };
    await this.service.updateDependent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dependentAddresses")
  async disconnectDependentAddresses(
    @common.Param() params: DependentWhereUniqueInput,
    @common.Body() body: DependentAddressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentAddresses: {
        disconnect: body,
      },
    };
    await this.service.updateDependent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/dependentAttachments")
  @ApiNestedQuery(DependentAttachmentFindManyArgs)
  async findDependentAttachments(
    @common.Req() request: Request,
    @common.Param() params: DependentWhereUniqueInput
  ): Promise<DependentAttachment[]> {
    const query = plainToClass(DependentAttachmentFindManyArgs, request.query);
    const results = await this.service.findDependentAttachments(params.id, {
      ...query,
      select: {
        dependents: {
          select: {
            id: true,
          },
        },

        group: true,
        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dependentAttachments")
  async connectDependentAttachments(
    @common.Param() params: DependentWhereUniqueInput,
    @common.Body() body: DependentAttachmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentAttachments: {
        connect: body,
      },
    };
    await this.service.updateDependent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dependentAttachments")
  async updateDependentAttachments(
    @common.Param() params: DependentWhereUniqueInput,
    @common.Body() body: DependentAttachmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentAttachments: {
        set: body,
      },
    };
    await this.service.updateDependent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dependentAttachments")
  async disconnectDependentAttachments(
    @common.Param() params: DependentWhereUniqueInput,
    @common.Body() body: DependentAttachmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentAttachments: {
        disconnect: body,
      },
    };
    await this.service.updateDependent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/dependentContacts")
  @ApiNestedQuery(DependentContactFindManyArgs)
  async findDependentContacts(
    @common.Req() request: Request,
    @common.Param() params: DependentWhereUniqueInput
  ): Promise<DependentContact[]> {
    const query = plainToClass(DependentContactFindManyArgs, request.query);
    const results = await this.service.findDependentContacts(params.id, {
      ...query,
      select: {
        dependents: {
          select: {
            id: true,
          },
        },

        email: true,
        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dependentContacts")
  async connectDependentContacts(
    @common.Param() params: DependentWhereUniqueInput,
    @common.Body() body: DependentContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentContacts: {
        connect: body,
      },
    };
    await this.service.updateDependent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dependentContacts")
  async updateDependentContacts(
    @common.Param() params: DependentWhereUniqueInput,
    @common.Body() body: DependentContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentContacts: {
        set: body,
      },
    };
    await this.service.updateDependent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dependentContacts")
  async disconnectDependentContacts(
    @common.Param() params: DependentWhereUniqueInput,
    @common.Body() body: DependentContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentContacts: {
        disconnect: body,
      },
    };
    await this.service.updateDependent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/dependentDocuments")
  @ApiNestedQuery(DependentDocumentFindManyArgs)
  async findDependentDocuments(
    @common.Req() request: Request,
    @common.Param() params: DependentWhereUniqueInput
  ): Promise<DependentDocument[]> {
    const query = plainToClass(DependentDocumentFindManyArgs, request.query);
    const results = await this.service.findDependentDocuments(params.id, {
      ...query,
      select: {
        dependents: {
          select: {
            id: true,
          },
        },

        id: true,
        issuer: true,
        numberField: true,
        typeField: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dependentDocuments")
  async connectDependentDocuments(
    @common.Param() params: DependentWhereUniqueInput,
    @common.Body() body: DependentDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentDocuments: {
        connect: body,
      },
    };
    await this.service.updateDependent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dependentDocuments")
  async updateDependentDocuments(
    @common.Param() params: DependentWhereUniqueInput,
    @common.Body() body: DependentDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentDocuments: {
        set: body,
      },
    };
    await this.service.updateDependent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dependentDocuments")
  async disconnectDependentDocuments(
    @common.Param() params: DependentWhereUniqueInput,
    @common.Body() body: DependentDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentDocuments: {
        disconnect: body,
      },
    };
    await this.service.updateDependent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/dependentPhones")
  @ApiNestedQuery(DependentPhoneFindManyArgs)
  async findDependentPhones(
    @common.Req() request: Request,
    @common.Param() params: DependentWhereUniqueInput
  ): Promise<DependentPhone[]> {
    const query = plainToClass(DependentPhoneFindManyArgs, request.query);
    const results = await this.service.findDependentPhones(params.id, {
      ...query,
      select: {
        dependents: {
          select: {
            id: true,
          },
        },

        id: true,
        numberField: true,
        typeField: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dependentPhones")
  async connectDependentPhones(
    @common.Param() params: DependentWhereUniqueInput,
    @common.Body() body: DependentPhoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentPhones: {
        connect: body,
      },
    };
    await this.service.updateDependent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dependentPhones")
  async updateDependentPhones(
    @common.Param() params: DependentWhereUniqueInput,
    @common.Body() body: DependentPhoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentPhones: {
        set: body,
      },
    };
    await this.service.updateDependent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dependentPhones")
  async disconnectDependentPhones(
    @common.Param() params: DependentWhereUniqueInput,
    @common.Body() body: DependentPhoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependentPhones: {
        disconnect: body,
      },
    };
    await this.service.updateDependent({
      where: params,
      data,
      select: { id: true },
    });
  }
}
