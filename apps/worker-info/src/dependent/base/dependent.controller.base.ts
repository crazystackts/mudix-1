/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DependentService } from "../dependent.service";
import { DependentCreateInput } from "./DependentCreateInput";
import { Dependent } from "./Dependent";
import { DependentFindManyArgs } from "./DependentFindManyArgs";
import { DependentWhereUniqueInput } from "./DependentWhereUniqueInput";
import { DependentUpdateInput } from "./DependentUpdateInput";

export class DependentControllerBase {
  constructor(protected readonly service: DependentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Dependent })
  async createDependent(
    @common.Body() data: DependentCreateInput
  ): Promise<Dependent> {
    return await this.service.createDependent({
      data: data,
      select: {
        affectionateFirstName: true,
        affectionateLastName: true,
        birthDate: true,
        complete: true,
        credential: true,
        dependentAddresses: true,
        dependentAttachments: true,
        dependentContactAuthorizationId: true,
        dependentContacts: true,
        dependentDocuments: true,
        dependentPhones: true,
        education: true,
        exclude: true,
        firstName: true,
        gender: true,
        id: true,
        lastName: true,
        maritalStatus: true,
        relationship: true,
        requestId: true,
        socialFirstName: true,
        socialLastName: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Dependent] })
  @ApiNestedQuery(DependentFindManyArgs)
  async dependents(@common.Req() request: Request): Promise<Dependent[]> {
    const args = plainToClass(DependentFindManyArgs, request.query);
    return this.service.dependents({
      ...args,
      select: {
        affectionateFirstName: true,
        affectionateLastName: true,
        birthDate: true,
        complete: true,
        credential: true,
        dependentAddresses: true,
        dependentAttachments: true,
        dependentContactAuthorizationId: true,
        dependentContacts: true,
        dependentDocuments: true,
        dependentPhones: true,
        education: true,
        exclude: true,
        firstName: true,
        gender: true,
        id: true,
        lastName: true,
        maritalStatus: true,
        relationship: true,
        requestId: true,
        socialFirstName: true,
        socialLastName: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Dependent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dependent(
    @common.Param() params: DependentWhereUniqueInput
  ): Promise<Dependent | null> {
    const result = await this.service.dependent({
      where: params,
      select: {
        affectionateFirstName: true,
        affectionateLastName: true,
        birthDate: true,
        complete: true,
        credential: true,
        dependentAddresses: true,
        dependentAttachments: true,
        dependentContactAuthorizationId: true,
        dependentContacts: true,
        dependentDocuments: true,
        dependentPhones: true,
        education: true,
        exclude: true,
        firstName: true,
        gender: true,
        id: true,
        lastName: true,
        maritalStatus: true,
        relationship: true,
        requestId: true,
        socialFirstName: true,
        socialLastName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Dependent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDependent(
    @common.Param() params: DependentWhereUniqueInput,
    @common.Body() data: DependentUpdateInput
  ): Promise<Dependent | null> {
    try {
      return await this.service.updateDependent({
        where: params,
        data: data,
        select: {
          affectionateFirstName: true,
          affectionateLastName: true,
          birthDate: true,
          complete: true,
          credential: true,
          dependentAddresses: true,
          dependentAttachments: true,
          dependentContactAuthorizationId: true,
          dependentContacts: true,
          dependentDocuments: true,
          dependentPhones: true,
          education: true,
          exclude: true,
          firstName: true,
          gender: true,
          id: true,
          lastName: true,
          maritalStatus: true,
          relationship: true,
          requestId: true,
          socialFirstName: true,
          socialLastName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Dependent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDependent(
    @common.Param() params: DependentWhereUniqueInput
  ): Promise<Dependent | null> {
    try {
      return await this.service.deleteDependent({
        where: params,
        select: {
          affectionateFirstName: true,
          affectionateLastName: true,
          birthDate: true,
          complete: true,
          credential: true,
          dependentAddresses: true,
          dependentAttachments: true,
          dependentContactAuthorizationId: true,
          dependentContacts: true,
          dependentDocuments: true,
          dependentPhones: true,
          education: true,
          exclude: true,
          firstName: true,
          gender: true,
          id: true,
          lastName: true,
          maritalStatus: true,
          relationship: true,
          requestId: true,
          socialFirstName: true,
          socialLastName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
