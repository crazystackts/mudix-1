/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Dependent } from "./Dependent";
import { DependentCountArgs } from "./DependentCountArgs";
import { DependentFindManyArgs } from "./DependentFindManyArgs";
import { DependentFindUniqueArgs } from "./DependentFindUniqueArgs";
import { CreateDependentArgs } from "./CreateDependentArgs";
import { UpdateDependentArgs } from "./UpdateDependentArgs";
import { DeleteDependentArgs } from "./DeleteDependentArgs";
import { DependentAddressFindManyArgs } from "../../dependentAddress/base/DependentAddressFindManyArgs";
import { DependentAddress } from "../../dependentAddress/base/DependentAddress";
import { DependentAttachmentFindManyArgs } from "../../dependentAttachment/base/DependentAttachmentFindManyArgs";
import { DependentAttachment } from "../../dependentAttachment/base/DependentAttachment";
import { DependentContactFindManyArgs } from "../../dependentContact/base/DependentContactFindManyArgs";
import { DependentContact } from "../../dependentContact/base/DependentContact";
import { DependentDocumentFindManyArgs } from "../../dependentDocument/base/DependentDocumentFindManyArgs";
import { DependentDocument } from "../../dependentDocument/base/DependentDocument";
import { DependentPhoneFindManyArgs } from "../../dependentPhone/base/DependentPhoneFindManyArgs";
import { DependentPhone } from "../../dependentPhone/base/DependentPhone";
import { DependentContactAuthorization } from "../../dependentContactAuthorization/base/DependentContactAuthorization";
import { Request } from "../../request/base/Request";
import { DependentService } from "../dependent.service";
@graphql.Resolver(() => Dependent)
export class DependentResolverBase {
  constructor(protected readonly service: DependentService) {}

  async _dependentsMeta(
    @graphql.Args() args: DependentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Dependent])
  async dependents(
    @graphql.Args() args: DependentFindManyArgs
  ): Promise<Dependent[]> {
    return this.service.dependents(args);
  }

  @graphql.Query(() => Dependent, { nullable: true })
  async dependent(
    @graphql.Args() args: DependentFindUniqueArgs
  ): Promise<Dependent | null> {
    const result = await this.service.dependent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Dependent)
  async createDependent(
    @graphql.Args() args: CreateDependentArgs
  ): Promise<Dependent> {
    return await this.service.createDependent({
      ...args,
      data: {
        ...args.data,

        dependentContactAuthorization: args.data.dependentContactAuthorization
          ? {
              connect: args.data.dependentContactAuthorization,
            }
          : undefined,

        request: {
          connect: args.data.request,
        },
      },
    });
  }

  @graphql.Mutation(() => Dependent)
  async updateDependent(
    @graphql.Args() args: UpdateDependentArgs
  ): Promise<Dependent | null> {
    try {
      return await this.service.updateDependent({
        ...args,
        data: {
          ...args.data,

          dependentContactAuthorization: args.data.dependentContactAuthorization
            ? {
                connect: args.data.dependentContactAuthorization,
              }
            : undefined,

          request: {
            connect: args.data.request,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Dependent)
  async deleteDependent(
    @graphql.Args() args: DeleteDependentArgs
  ): Promise<Dependent | null> {
    try {
      return await this.service.deleteDependent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [DependentAddress], {
    name: "dependentAddresses",
  })
  async findDependentAddresses(
    @graphql.Parent() parent: Dependent,
    @graphql.Args() args: DependentAddressFindManyArgs
  ): Promise<DependentAddress[]> {
    const results = await this.service.findDependentAddresses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [DependentAttachment], {
    name: "dependentAttachments",
  })
  async findDependentAttachments(
    @graphql.Parent() parent: Dependent,
    @graphql.Args() args: DependentAttachmentFindManyArgs
  ): Promise<DependentAttachment[]> {
    const results = await this.service.findDependentAttachments(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [DependentContact], { name: "dependentContacts" })
  async findDependentContacts(
    @graphql.Parent() parent: Dependent,
    @graphql.Args() args: DependentContactFindManyArgs
  ): Promise<DependentContact[]> {
    const results = await this.service.findDependentContacts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [DependentDocument], {
    name: "dependentDocuments",
  })
  async findDependentDocuments(
    @graphql.Parent() parent: Dependent,
    @graphql.Args() args: DependentDocumentFindManyArgs
  ): Promise<DependentDocument[]> {
    const results = await this.service.findDependentDocuments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [DependentPhone], { name: "dependentPhones" })
  async findDependentPhones(
    @graphql.Parent() parent: Dependent,
    @graphql.Args() args: DependentPhoneFindManyArgs
  ): Promise<DependentPhone[]> {
    const results = await this.service.findDependentPhones(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => DependentContactAuthorization, {
    nullable: true,
    name: "dependentContactAuthorization",
  })
  async getDependentContactAuthorization(
    @graphql.Parent() parent: Dependent
  ): Promise<DependentContactAuthorization | null> {
    const result = await this.service.getDependentContactAuthorization(
      parent.id
    );

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Request, {
    nullable: true,
    name: "request",
  })
  async getRequest(
    @graphql.Parent() parent: Dependent
  ): Promise<Request | null> {
    const result = await this.service.getRequest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
