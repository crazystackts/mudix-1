/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  IsDate,
  IsBoolean,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { DependentAddressCreateNestedManyWithoutDependentsInput } from "./DependentAddressCreateNestedManyWithoutDependentsInput";
import { DependentAttachmentCreateNestedManyWithoutDependentsInput } from "./DependentAttachmentCreateNestedManyWithoutDependentsInput";
import { DependentContactAuthorizationWhereUniqueInput } from "../../dependentContactAuthorization/base/DependentContactAuthorizationWhereUniqueInput";
import { DependentContactCreateNestedManyWithoutDependentsInput } from "./DependentContactCreateNestedManyWithoutDependentsInput";
import { DependentDocumentCreateNestedManyWithoutDependentsInput } from "./DependentDocumentCreateNestedManyWithoutDependentsInput";
import { DependentPhoneCreateNestedManyWithoutDependentsInput } from "./DependentPhoneCreateNestedManyWithoutDependentsInput";
import { RequestWhereUniqueInput } from "../../request/base/RequestWhereUniqueInput";

@InputType()
class DependentCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  affectionateFirstName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  affectionateLastName?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  birthDate?: Date | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  complete?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  credential?: string | null;

  @ApiProperty({
    required: false,
    type: () => DependentAddressCreateNestedManyWithoutDependentsInput,
  })
  @ValidateNested()
  @Type(() => DependentAddressCreateNestedManyWithoutDependentsInput)
  @IsOptional()
  @Field(() => DependentAddressCreateNestedManyWithoutDependentsInput, {
    nullable: true,
  })
  dependentAddresses?: DependentAddressCreateNestedManyWithoutDependentsInput;

  @ApiProperty({
    required: false,
    type: () => DependentAttachmentCreateNestedManyWithoutDependentsInput,
  })
  @ValidateNested()
  @Type(() => DependentAttachmentCreateNestedManyWithoutDependentsInput)
  @IsOptional()
  @Field(() => DependentAttachmentCreateNestedManyWithoutDependentsInput, {
    nullable: true,
  })
  dependentAttachments?: DependentAttachmentCreateNestedManyWithoutDependentsInput;

  @ApiProperty({
    required: false,
    type: () => DependentContactAuthorizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DependentContactAuthorizationWhereUniqueInput)
  @IsOptional()
  @Field(() => DependentContactAuthorizationWhereUniqueInput, {
    nullable: true,
  })
  dependentContactAuthorization?: DependentContactAuthorizationWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => DependentContactCreateNestedManyWithoutDependentsInput,
  })
  @ValidateNested()
  @Type(() => DependentContactCreateNestedManyWithoutDependentsInput)
  @IsOptional()
  @Field(() => DependentContactCreateNestedManyWithoutDependentsInput, {
    nullable: true,
  })
  dependentContacts?: DependentContactCreateNestedManyWithoutDependentsInput;

  @ApiProperty({
    required: false,
    type: () => DependentDocumentCreateNestedManyWithoutDependentsInput,
  })
  @ValidateNested()
  @Type(() => DependentDocumentCreateNestedManyWithoutDependentsInput)
  @IsOptional()
  @Field(() => DependentDocumentCreateNestedManyWithoutDependentsInput, {
    nullable: true,
  })
  dependentDocuments?: DependentDocumentCreateNestedManyWithoutDependentsInput;

  @ApiProperty({
    required: false,
    type: () => DependentPhoneCreateNestedManyWithoutDependentsInput,
  })
  @ValidateNested()
  @Type(() => DependentPhoneCreateNestedManyWithoutDependentsInput)
  @IsOptional()
  @Field(() => DependentPhoneCreateNestedManyWithoutDependentsInput, {
    nullable: true,
  })
  dependentPhones?: DependentPhoneCreateNestedManyWithoutDependentsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  education?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  exclude?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  gender?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  maritalStatus?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  relationship?: string | null;

  @ApiProperty({
    required: true,
    type: () => RequestWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => RequestWhereUniqueInput)
  @Field(() => RequestWhereUniqueInput)
  request!: RequestWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  socialFirstName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  socialLastName?: string | null;
}

export { DependentCreateInput as DependentCreateInput };
