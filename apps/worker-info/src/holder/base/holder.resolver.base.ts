/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Holder } from "./Holder";
import { HolderCountArgs } from "./HolderCountArgs";
import { HolderFindManyArgs } from "./HolderFindManyArgs";
import { HolderFindUniqueArgs } from "./HolderFindUniqueArgs";
import { CreateHolderArgs } from "./CreateHolderArgs";
import { UpdateHolderArgs } from "./UpdateHolderArgs";
import { DeleteHolderArgs } from "./DeleteHolderArgs";
import { HolderService } from "../holder.service";
@graphql.Resolver(() => Holder)
export class HolderResolverBase {
  constructor(protected readonly service: HolderService) {}

  async _holdersMeta(
    @graphql.Args() args: HolderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Holder])
  async holders(@graphql.Args() args: HolderFindManyArgs): Promise<Holder[]> {
    return this.service.holders(args);
  }

  @graphql.Query(() => Holder, { nullable: true })
  async holder(
    @graphql.Args() args: HolderFindUniqueArgs
  ): Promise<Holder | null> {
    const result = await this.service.holder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Holder)
  async createHolder(@graphql.Args() args: CreateHolderArgs): Promise<Holder> {
    return await this.service.createHolder({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Holder)
  async updateHolder(
    @graphql.Args() args: UpdateHolderArgs
  ): Promise<Holder | null> {
    try {
      return await this.service.updateHolder({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Holder)
  async deleteHolder(
    @graphql.Args() args: DeleteHolderArgs
  ): Promise<Holder | null> {
    try {
      return await this.service.deleteHolder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
