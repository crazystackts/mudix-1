/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AddressUpdateManyWithoutHoldersInput } from "./AddressUpdateManyWithoutHoldersInput";
import { ValidateNested, IsOptional, IsString, IsDate } from "class-validator";
import { Type } from "class-transformer";
import { AttachmentUpdateManyWithoutHoldersInput } from "./AttachmentUpdateManyWithoutHoldersInput";
import { ContactAuthorizationWhereUniqueInput } from "../../contactAuthorization/base/ContactAuthorizationWhereUniqueInput";
import { ContactUpdateManyWithoutHoldersInput } from "./ContactUpdateManyWithoutHoldersInput";
import { DocumentUpdateManyWithoutHoldersInput } from "./DocumentUpdateManyWithoutHoldersInput";
import { EditedFieldUpdateManyWithoutHoldersInput } from "./EditedFieldUpdateManyWithoutHoldersInput";
import { FilialUpdateManyWithoutHoldersInput } from "./FilialUpdateManyWithoutHoldersInput";
import { PhoneUpdateManyWithoutHoldersInput } from "./PhoneUpdateManyWithoutHoldersInput";
import { RequestWhereUniqueInput } from "../../request/base/RequestWhereUniqueInput";
import { SocioeconomicInfoUpdateManyWithoutHoldersInput } from "./SocioeconomicInfoUpdateManyWithoutHoldersInput";

@InputType()
class HolderUpdateInput {
  @ApiProperty({
    required: false,
    type: () => AddressUpdateManyWithoutHoldersInput,
  })
  @ValidateNested()
  @Type(() => AddressUpdateManyWithoutHoldersInput)
  @IsOptional()
  @Field(() => AddressUpdateManyWithoutHoldersInput, {
    nullable: true,
  })
  addresses?: AddressUpdateManyWithoutHoldersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  affectionateFirstName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  affectionateGender?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  affectionateLastName?: string | null;

  @ApiProperty({
    required: false,
    type: () => AttachmentUpdateManyWithoutHoldersInput,
  })
  @ValidateNested()
  @Type(() => AttachmentUpdateManyWithoutHoldersInput)
  @IsOptional()
  @Field(() => AttachmentUpdateManyWithoutHoldersInput, {
    nullable: true,
  })
  attachments?: AttachmentUpdateManyWithoutHoldersInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  birthDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => ContactAuthorizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ContactAuthorizationWhereUniqueInput)
  @IsOptional()
  @Field(() => ContactAuthorizationWhereUniqueInput, {
    nullable: true,
  })
  contactAuthorization?: ContactAuthorizationWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ContactUpdateManyWithoutHoldersInput,
  })
  @ValidateNested()
  @Type(() => ContactUpdateManyWithoutHoldersInput)
  @IsOptional()
  @Field(() => ContactUpdateManyWithoutHoldersInput, {
    nullable: true,
  })
  contacts?: ContactUpdateManyWithoutHoldersInput;

  @ApiProperty({
    required: false,
    type: () => DocumentUpdateManyWithoutHoldersInput,
  })
  @ValidateNested()
  @Type(() => DocumentUpdateManyWithoutHoldersInput)
  @IsOptional()
  @Field(() => DocumentUpdateManyWithoutHoldersInput, {
    nullable: true,
  })
  documents?: DocumentUpdateManyWithoutHoldersInput;

  @ApiProperty({
    required: false,
    type: () => EditedFieldUpdateManyWithoutHoldersInput,
  })
  @ValidateNested()
  @Type(() => EditedFieldUpdateManyWithoutHoldersInput)
  @IsOptional()
  @Field(() => EditedFieldUpdateManyWithoutHoldersInput, {
    nullable: true,
  })
  editedFields?: EditedFieldUpdateManyWithoutHoldersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  education?: string | null;

  @ApiProperty({
    required: false,
    type: () => FilialUpdateManyWithoutHoldersInput,
  })
  @ValidateNested()
  @Type(() => FilialUpdateManyWithoutHoldersInput)
  @IsOptional()
  @Field(() => FilialUpdateManyWithoutHoldersInput, {
    nullable: true,
  })
  filial?: FilialUpdateManyWithoutHoldersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  gender?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  maritalStatus?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  password?: string;

  @ApiProperty({
    required: false,
    type: () => PhoneUpdateManyWithoutHoldersInput,
  })
  @ValidateNested()
  @Type(() => PhoneUpdateManyWithoutHoldersInput)
  @IsOptional()
  @Field(() => PhoneUpdateManyWithoutHoldersInput, {
    nullable: true,
  })
  phones?: PhoneUpdateManyWithoutHoldersInput;

  @ApiProperty({
    required: false,
    type: () => RequestWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => RequestWhereUniqueInput)
  @IsOptional()
  @Field(() => RequestWhereUniqueInput, {
    nullable: true,
  })
  request?: RequestWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  socialFirstName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  socialGender?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  socialLastName?: string | null;

  @ApiProperty({
    required: false,
    type: () => SocioeconomicInfoUpdateManyWithoutHoldersInput,
  })
  @ValidateNested()
  @Type(() => SocioeconomicInfoUpdateManyWithoutHoldersInput)
  @IsOptional()
  @Field(() => SocioeconomicInfoUpdateManyWithoutHoldersInput, {
    nullable: true,
  })
  socioeconomicInfo?: SocioeconomicInfoUpdateManyWithoutHoldersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  token?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  typeField?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  username?: string;
}

export { HolderUpdateInput as HolderUpdateInput };
