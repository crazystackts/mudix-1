/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AddressListRelationFilter } from "../../address/base/AddressListRelationFilter";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { AttachmentListRelationFilter } from "../../attachment/base/AttachmentListRelationFilter";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { ContactAuthorizationWhereUniqueInput } from "../../contactAuthorization/base/ContactAuthorizationWhereUniqueInput";
import { ContactListRelationFilter } from "../../contact/base/ContactListRelationFilter";
import { DocumentListRelationFilter } from "../../document/base/DocumentListRelationFilter";
import { EditedFieldListRelationFilter } from "../../editedField/base/EditedFieldListRelationFilter";
import { FilialListRelationFilter } from "../../filial/base/FilialListRelationFilter";
import { StringFilter } from "../../util/StringFilter";
import { PhoneListRelationFilter } from "../../phone/base/PhoneListRelationFilter";
import { RequestWhereUniqueInput } from "../../request/base/RequestWhereUniqueInput";
import { SocioeconomicInfoListRelationFilter } from "../../socioeconomicInfo/base/SocioeconomicInfoListRelationFilter";

@InputType()
class HolderWhereInput {
  @ApiProperty({
    required: false,
    type: () => AddressListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AddressListRelationFilter)
  @IsOptional()
  @Field(() => AddressListRelationFilter, {
    nullable: true,
  })
  addresses?: AddressListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  affectionateFirstName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  affectionateGender?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  affectionateLastName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => AttachmentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AttachmentListRelationFilter)
  @IsOptional()
  @Field(() => AttachmentListRelationFilter, {
    nullable: true,
  })
  attachments?: AttachmentListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  birthDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ContactAuthorizationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ContactAuthorizationWhereUniqueInput)
  @IsOptional()
  @Field(() => ContactAuthorizationWhereUniqueInput, {
    nullable: true,
  })
  contactAuthorization?: ContactAuthorizationWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => ContactListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ContactListRelationFilter)
  @IsOptional()
  @Field(() => ContactListRelationFilter, {
    nullable: true,
  })
  contacts?: ContactListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => DocumentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => DocumentListRelationFilter)
  @IsOptional()
  @Field(() => DocumentListRelationFilter, {
    nullable: true,
  })
  documents?: DocumentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => EditedFieldListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EditedFieldListRelationFilter)
  @IsOptional()
  @Field(() => EditedFieldListRelationFilter, {
    nullable: true,
  })
  editedFields?: EditedFieldListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  education?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => FilialListRelationFilter,
  })
  @ValidateNested()
  @Type(() => FilialListRelationFilter)
  @IsOptional()
  @Field(() => FilialListRelationFilter, {
    nullable: true,
  })
  filial?: FilialListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  firstName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  gender?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  lastName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  maritalStatus?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  password?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => PhoneListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PhoneListRelationFilter)
  @IsOptional()
  @Field(() => PhoneListRelationFilter, {
    nullable: true,
  })
  phones?: PhoneListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => RequestWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => RequestWhereUniqueInput)
  @IsOptional()
  @Field(() => RequestWhereUniqueInput, {
    nullable: true,
  })
  request?: RequestWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  socialFirstName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  socialGender?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  socialLastName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => SocioeconomicInfoListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SocioeconomicInfoListRelationFilter)
  @IsOptional()
  @Field(() => SocioeconomicInfoListRelationFilter, {
    nullable: true,
  })
  socioeconomicInfo?: SocioeconomicInfoListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  token?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  typeField?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  username?: StringFilter;
}

export { HolderWhereInput as HolderWhereInput };
