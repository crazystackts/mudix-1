/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Holder as PrismaHolder } from "@prisma/client";

export class HolderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HolderCountArgs, "select">): Promise<number> {
    return this.prisma.holder.count(args);
  }

  async holders<T extends Prisma.HolderFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.HolderFindManyArgs>
  ): Promise<PrismaHolder[]> {
    return this.prisma.holder.findMany<Prisma.HolderFindManyArgs>(args);
  }
  async holder<T extends Prisma.HolderFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.HolderFindUniqueArgs>
  ): Promise<PrismaHolder | null> {
    return this.prisma.holder.findUnique(args);
  }
  async createHolder<T extends Prisma.HolderCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HolderCreateArgs>
  ): Promise<PrismaHolder> {
    return this.prisma.holder.create<T>(args);
  }
  async updateHolder<T extends Prisma.HolderUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HolderUpdateArgs>
  ): Promise<PrismaHolder> {
    return this.prisma.holder.update<T>(args);
  }
  async deleteHolder<T extends Prisma.HolderDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.HolderDeleteArgs>
  ): Promise<PrismaHolder> {
    return this.prisma.holder.delete(args);
  }
}
