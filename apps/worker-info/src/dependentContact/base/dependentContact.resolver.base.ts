/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DependentContact } from "./DependentContact";
import { DependentContactCountArgs } from "./DependentContactCountArgs";
import { DependentContactFindManyArgs } from "./DependentContactFindManyArgs";
import { DependentContactFindUniqueArgs } from "./DependentContactFindUniqueArgs";
import { CreateDependentContactArgs } from "./CreateDependentContactArgs";
import { UpdateDependentContactArgs } from "./UpdateDependentContactArgs";
import { DeleteDependentContactArgs } from "./DeleteDependentContactArgs";
import { Dependent } from "../../dependent/base/Dependent";
import { DependentContactService } from "../dependentContact.service";
@graphql.Resolver(() => DependentContact)
export class DependentContactResolverBase {
  constructor(protected readonly service: DependentContactService) {}

  async _dependentContactsMeta(
    @graphql.Args() args: DependentContactCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DependentContact])
  async dependentContacts(
    @graphql.Args() args: DependentContactFindManyArgs
  ): Promise<DependentContact[]> {
    return this.service.dependentContacts(args);
  }

  @graphql.Query(() => DependentContact, { nullable: true })
  async dependentContact(
    @graphql.Args() args: DependentContactFindUniqueArgs
  ): Promise<DependentContact | null> {
    const result = await this.service.dependentContact(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DependentContact)
  async createDependentContact(
    @graphql.Args() args: CreateDependentContactArgs
  ): Promise<DependentContact> {
    return await this.service.createDependentContact({
      ...args,
      data: {
        ...args.data,

        dependents: {
          connect: args.data.dependents,
        },
      },
    });
  }

  @graphql.Mutation(() => DependentContact)
  async updateDependentContact(
    @graphql.Args() args: UpdateDependentContactArgs
  ): Promise<DependentContact | null> {
    try {
      return await this.service.updateDependentContact({
        ...args,
        data: {
          ...args.data,

          dependents: {
            connect: args.data.dependents,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DependentContact)
  async deleteDependentContact(
    @graphql.Args() args: DeleteDependentContactArgs
  ): Promise<DependentContact | null> {
    try {
      return await this.service.deleteDependentContact(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Dependent, {
    nullable: true,
    name: "dependents",
  })
  async getDependents(
    @graphql.Parent() parent: DependentContact
  ): Promise<Dependent | null> {
    const result = await this.service.getDependents(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
