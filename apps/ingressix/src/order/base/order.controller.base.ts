/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrderService } from "../order.service";
import { OrderCreateInput } from "./OrderCreateInput";
import { Order } from "./Order";
import { OrderFindManyArgs } from "./OrderFindManyArgs";
import { OrderWhereUniqueInput } from "./OrderWhereUniqueInput";
import { OrderUpdateInput } from "./OrderUpdateInput";
import { ItemFindManyArgs } from "../../item/base/ItemFindManyArgs";
import { Item } from "../../item/base/Item";
import { ItemWhereUniqueInput } from "../../item/base/ItemWhereUniqueInput";
import { PaymentHistoryFindManyArgs } from "../../paymentHistory/base/PaymentHistoryFindManyArgs";
import { PaymentHistory } from "../../paymentHistory/base/PaymentHistory";
import { PaymentHistoryWhereUniqueInput } from "../../paymentHistory/base/PaymentHistoryWhereUniqueInput";

export class OrderControllerBase {
  constructor(protected readonly service: OrderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Order })
  async createOrder(@common.Body() data: OrderCreateInput): Promise<Order> {
    return await this.service.createOrder({
      data: {
        ...data,

        customer: {
          connect: data.customer,
        },
      },
      select: {
        acquisitionChannel: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,
        onPremisesUuid: true,
        orderCancellationDate: true,
        orderConfirmationDate: true,
        orderCreationDate: true,
        orderStatus: true,
        paymentMethod: true,
        paymentUuid: true,
        pixCode: true,
        pixExpiration: true,
        pixExpirationTime: true,
        sessionCode: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Order] })
  @ApiNestedQuery(OrderFindManyArgs)
  async orders(@common.Req() request: Request): Promise<Order[]> {
    const args = plainToClass(OrderFindManyArgs, request.query);
    return this.service.orders({
      ...args,
      select: {
        acquisitionChannel: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,
        onPremisesUuid: true,
        orderCancellationDate: true,
        orderConfirmationDate: true,
        orderCreationDate: true,
        orderStatus: true,
        paymentMethod: true,
        paymentUuid: true,
        pixCode: true,
        pixExpiration: true,
        pixExpirationTime: true,
        sessionCode: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Order })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async order(
    @common.Param() params: OrderWhereUniqueInput
  ): Promise<Order | null> {
    const result = await this.service.order({
      where: params,
      select: {
        acquisitionChannel: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,
        onPremisesUuid: true,
        orderCancellationDate: true,
        orderConfirmationDate: true,
        orderCreationDate: true,
        orderStatus: true,
        paymentMethod: true,
        paymentUuid: true,
        pixCode: true,
        pixExpiration: true,
        pixExpirationTime: true,
        sessionCode: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Order })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOrder(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() data: OrderUpdateInput
  ): Promise<Order | null> {
    try {
      return await this.service.updateOrder({
        where: params,
        data: {
          ...data,

          customer: {
            connect: data.customer,
          },
        },
        select: {
          acquisitionChannel: true,

          customer: {
            select: {
              id: true,
            },
          },

          id: true,
          onPremisesUuid: true,
          orderCancellationDate: true,
          orderConfirmationDate: true,
          orderCreationDate: true,
          orderStatus: true,
          paymentMethod: true,
          paymentUuid: true,
          pixCode: true,
          pixExpiration: true,
          pixExpirationTime: true,
          sessionCode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Order })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOrder(
    @common.Param() params: OrderWhereUniqueInput
  ): Promise<Order | null> {
    try {
      return await this.service.deleteOrder({
        where: params,
        select: {
          acquisitionChannel: true,

          customer: {
            select: {
              id: true,
            },
          },

          id: true,
          onPremisesUuid: true,
          orderCancellationDate: true,
          orderConfirmationDate: true,
          orderCreationDate: true,
          orderStatus: true,
          paymentMethod: true,
          paymentUuid: true,
          pixCode: true,
          pixExpiration: true,
          pixExpirationTime: true,
          sessionCode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/items")
  @ApiNestedQuery(ItemFindManyArgs)
  async findItems(
    @common.Req() request: Request,
    @common.Param() params: OrderWhereUniqueInput
  ): Promise<Item[]> {
    const query = plainToClass(ItemFindManyArgs, request.query);
    const results = await this.service.findItems(params.id, {
      ...query,
      select: {
        dateTime: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        session: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/items")
  async connectItems(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: ItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      items: {
        connect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/items")
  async updateItems(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: ItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      items: {
        set: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/items")
  async disconnectItems(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: ItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      items: {
        disconnect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/paymentHistories")
  @ApiNestedQuery(PaymentHistoryFindManyArgs)
  async findPaymentHistories(
    @common.Req() request: Request,
    @common.Param() params: OrderWhereUniqueInput
  ): Promise<PaymentHistory[]> {
    const query = plainToClass(PaymentHistoryFindManyArgs, request.query);
    const results = await this.service.findPaymentHistories(params.id, {
      ...query,
      select: {
        amount: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        paymentDate: true,
        paymentMethod: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paymentHistories")
  async connectPaymentHistories(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: PaymentHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentHistories: {
        connect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paymentHistories")
  async updatePaymentHistories(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: PaymentHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentHistories: {
        set: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paymentHistories")
  async disconnectPaymentHistories(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: PaymentHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentHistories: {
        disconnect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }
}
